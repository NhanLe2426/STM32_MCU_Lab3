
Lab3_Buttons_Switches.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002730  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002860  08002860  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002860  08002860  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002860  08002860  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002864  08002864  00012864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000002c  08002894  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002894  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085c9  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c28  00000000  00000000  00028661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002a290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c7  00000000  00000000  0002ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e89  00000000  00000000  0002b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6be  00000000  00000000  00042330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082461  00000000  00000000  0004e9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028a4  00000000  00000000  000d0e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d36f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002824 	.word	0x08002824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08002824 	.word	0x08002824

0800014c <isButtonPressed>:
/**
 * @brief	Check if the index button is pressed or not
 * @param	index : The index of the current button
 * @retval	1 if the button is pressed (flag = 1) or 0 if it is not (flag = 0)
 */
int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000048 	.word	0x20000048

08000180 <getKeyInput>:
/**
 * @brief	Get the input from buttons and debounce processing
 * @param	None
 * @retval	None
 */
void getKeyInput(void) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000186:	2300      	movs	r3, #0
 8000188:	607b      	str	r3, [r7, #4]
 800018a:	e07c      	b.n	8000286 <getKeyInput+0x106>
		buffer0[i] = buffer1[i];
 800018c:	4a42      	ldr	r2, [pc, #264]	; (8000298 <getKeyInput+0x118>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000194:	4941      	ldr	r1, [pc, #260]	; (800029c <getKeyInput+0x11c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buffer1[i] = currState[i];
 800019c:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <getKeyInput+0x120>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	493c      	ldr	r1, [pc, #240]	; (8000298 <getKeyInput+0x118>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		currState[i] = HAL_GPIO_ReadPin(BTN_GPIO[i], BTN_Pin[i]);
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <getKeyInput+0x124>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493c      	ldr	r1, [pc, #240]	; (80002a8 <getKeyInput+0x128>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001bc:	4619      	mov	r1, r3
 80001be:	4610      	mov	r0, r2
 80001c0:	f001 fb02 	bl	80017c8 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	4619      	mov	r1, r3
 80001c8:	4a35      	ldr	r2, [pc, #212]	; (80002a0 <getKeyInput+0x120>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((buffer0[i] == buffer1[i]) && (buffer1[i] == currState[i])) {
 80001d0:	4a32      	ldr	r2, [pc, #200]	; (800029c <getKeyInput+0x11c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	492f      	ldr	r1, [pc, #188]	; (8000298 <getKeyInput+0x118>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d14d      	bne.n	8000280 <getKeyInput+0x100>
 80001e4:	4a2c      	ldr	r2, [pc, #176]	; (8000298 <getKeyInput+0x118>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ec:	492c      	ldr	r1, [pc, #176]	; (80002a0 <getKeyInput+0x120>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d143      	bne.n	8000280 <getKeyInput+0x100>
			if (prevState[i] != currState[i]) {
 80001f8:	4a2c      	ldr	r2, [pc, #176]	; (80002ac <getKeyInput+0x12c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4927      	ldr	r1, [pc, #156]	; (80002a0 <getKeyInput+0x120>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000208:	429a      	cmp	r2, r3
 800020a:	d019      	beq.n	8000240 <getKeyInput+0xc0>
				prevState[i] = currState[i];
 800020c:	4a24      	ldr	r2, [pc, #144]	; (80002a0 <getKeyInput+0x120>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	4925      	ldr	r1, [pc, #148]	; (80002ac <getKeyInput+0x12c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				// PRESSED
				if (currState[i] == PRESSED_STATE) {
 800021c:	4a20      	ldr	r2, [pc, #128]	; (80002a0 <getKeyInput+0x120>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	d12b      	bne.n	8000280 <getKeyInput+0x100>
					button_flag[i] = 1;
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <getKeyInput+0x130>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2101      	movs	r1, #1
 800022e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeOutCounter[i] = TIME_OUT;
 8000232:	4a20      	ldr	r2, [pc, #128]	; (80002b4 <getKeyInput+0x134>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023e:	e01f      	b.n	8000280 <getKeyInput+0x100>
				}
			}
			else {
				timeOutCounter[i]--;
 8000240:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <getKeyInput+0x134>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	1e5a      	subs	r2, r3, #1
 800024a:	491a      	ldr	r1, [pc, #104]	; (80002b4 <getKeyInput+0x134>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeOutCounter[i] <= 0) {
 8000252:	4a18      	ldr	r2, [pc, #96]	; (80002b4 <getKeyInput+0x134>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	2b00      	cmp	r3, #0
 800025c:	dc10      	bgt.n	8000280 <getKeyInput+0x100>
					timeOutCounter[i] = TIME_OUT;
 800025e:	4a15      	ldr	r2, [pc, #84]	; (80002b4 <getKeyInput+0x134>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					// PRESSSED AND HOLD
					if (prevState[i] == PRESSED_STATE) {
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <getKeyInput+0x12c>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d104      	bne.n	8000280 <getKeyInput+0x100>
						button_flag[i] = 1;
 8000276:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <getKeyInput+0x130>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++) {
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b02      	cmp	r3, #2
 800028a:	f77f af7f 	ble.w	800018c <getKeyInput+0xc>
					// prevState[i] = NORMAL_STATE;
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000060 	.word	0x20000060
 800029c:	20000054 	.word	0x20000054
 80002a0:	2000006c 	.word	0x2000006c
 80002a4:	20000000 	.word	0x20000000
 80002a8:	2000000c 	.word	0x2000000c
 80002ac:	20000078 	.word	0x20000078
 80002b0:	20000048 	.word	0x20000048
 80002b4:	20000084 	.word	0x20000084

080002b8 <FSM_Automatic_Run>:
/**
 * @brief	Run the FSM in automatic mode
 * @param	None
 * @retval	None
 */
void FSM_Automatic_Run(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	switch (status) {
 80002bc:	4bd1      	ldr	r3, [pc, #836]	; (8000604 <FSM_Automatic_Run+0x34c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	f200 81a8 	bhi.w	8000618 <FSM_Automatic_Run+0x360>
 80002c8:	a201      	add	r2, pc, #4	; (adr r2, 80002d0 <FSM_Automatic_Run+0x18>)
 80002ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ce:	bf00      	nop
 80002d0:	080002e5 	.word	0x080002e5
 80002d4:	08000397 	.word	0x08000397
 80002d8:	0800040d 	.word	0x0800040d
 80002dc:	080004cf 	.word	0x080004cf
 80002e0:	08000545 	.word	0x08000545
	case INIT:
		setAllRedLED(OFF);
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 fee5 	bl	80010b4 <setAllRedLED>
		setAllYellowLED(OFF);
 80002ea:	2000      	movs	r0, #0
 80002ec:	f000 ff0a 	bl	8001104 <setAllYellowLED>
		setAllGreenLED(OFF);
 80002f0:	2000      	movs	r0, #0
 80002f2:	f000 ff2f 	bl	8001154 <setAllGreenLED>

		status = RED_GREEN;
 80002f6:	4bc3      	ldr	r3, [pc, #780]	; (8000604 <FSM_Automatic_Run+0x34c>)
 80002f8:	2202      	movs	r2, #2
 80002fa:	601a      	str	r2, [r3, #0]
		setTimer(1, 1000 * redDuration);
 80002fc:	4bc2      	ldr	r3, [pc, #776]	; (8000608 <FSM_Automatic_Run+0x350>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000304:	fb02 f303 	mul.w	r3, r2, r3
 8000308:	4619      	mov	r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	f000 fd9c 	bl	8000e48 <setTimer>
		setTimer(2, 1000 * greenDuration);
 8000310:	4bbe      	ldr	r3, [pc, #760]	; (800060c <FSM_Automatic_Run+0x354>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000318:	fb02 f303 	mul.w	r3, r2, r3
 800031c:	4619      	mov	r1, r3
 800031e:	2002      	movs	r0, #2
 8000320:	f000 fd92 	bl	8000e48 <setTimer>

		updateLedBuffer(0, redDuration / 10);
 8000324:	4bb8      	ldr	r3, [pc, #736]	; (8000608 <FSM_Automatic_Run+0x350>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4ab9      	ldr	r2, [pc, #740]	; (8000610 <FSM_Automatic_Run+0x358>)
 800032a:	fb82 1203 	smull	r1, r2, r2, r3
 800032e:	1092      	asrs	r2, r2, #2
 8000330:	17db      	asrs	r3, r3, #31
 8000332:	1ad3      	subs	r3, r2, r3
 8000334:	4619      	mov	r1, r3
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fc2c 	bl	8000b94 <updateLedBuffer>
		updateLedBuffer(1, redDuration % 10);
 800033c:	4bb2      	ldr	r3, [pc, #712]	; (8000608 <FSM_Automatic_Run+0x350>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	4bb3      	ldr	r3, [pc, #716]	; (8000610 <FSM_Automatic_Run+0x358>)
 8000342:	fb83 1302 	smull	r1, r3, r3, r2
 8000346:	1099      	asrs	r1, r3, #2
 8000348:	17d3      	asrs	r3, r2, #31
 800034a:	1ac9      	subs	r1, r1, r3
 800034c:	460b      	mov	r3, r1
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	440b      	add	r3, r1
 8000352:	005b      	lsls	r3, r3, #1
 8000354:	1ad1      	subs	r1, r2, r3
 8000356:	2001      	movs	r0, #1
 8000358:	f000 fc1c 	bl	8000b94 <updateLedBuffer>
		updateLedBuffer(2, greenDuration / 10);
 800035c:	4bab      	ldr	r3, [pc, #684]	; (800060c <FSM_Automatic_Run+0x354>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4aab      	ldr	r2, [pc, #684]	; (8000610 <FSM_Automatic_Run+0x358>)
 8000362:	fb82 1203 	smull	r1, r2, r2, r3
 8000366:	1092      	asrs	r2, r2, #2
 8000368:	17db      	asrs	r3, r3, #31
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	4619      	mov	r1, r3
 800036e:	2002      	movs	r0, #2
 8000370:	f000 fc10 	bl	8000b94 <updateLedBuffer>
		updateLedBuffer(3, greenDuration % 10);
 8000374:	4ba5      	ldr	r3, [pc, #660]	; (800060c <FSM_Automatic_Run+0x354>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4ba5      	ldr	r3, [pc, #660]	; (8000610 <FSM_Automatic_Run+0x358>)
 800037a:	fb83 1302 	smull	r1, r3, r3, r2
 800037e:	1099      	asrs	r1, r3, #2
 8000380:	17d3      	asrs	r3, r2, #31
 8000382:	1ac9      	subs	r1, r1, r3
 8000384:	460b      	mov	r3, r1
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	440b      	add	r3, r1
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	1ad1      	subs	r1, r2, r3
 800038e:	2003      	movs	r0, #3
 8000390:	f000 fc00 	bl	8000b94 <updateLedBuffer>
		break;
 8000394:	e149      	b.n	800062a <FSM_Automatic_Run+0x372>

	case RED_GREEN:
		setLightWay1(RESET, SET, SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2101      	movs	r1, #1
 800039a:	2000      	movs	r0, #0
 800039c:	f000 fe46 	bl	800102c <setLightWay1>
		setLightWay2(SET, SET, RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2101      	movs	r1, #1
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fe63 	bl	8001070 <setLightWay2>

		if (isTimerExpired(2) == 1) {
 80003aa:	2002      	movs	r0, #2
 80003ac:	f000 fd6c 	bl	8000e88 <isTimerExpired>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	f040 8132 	bne.w	800061c <FSM_Automatic_Run+0x364>
			status = RED_YELLOW;
 80003b8:	4b92      	ldr	r3, [pc, #584]	; (8000604 <FSM_Automatic_Run+0x34c>)
 80003ba:	2203      	movs	r2, #3
 80003bc:	601a      	str	r2, [r3, #0]
			setTimer(2, 1000 * yellowDuration);
 80003be:	4b95      	ldr	r3, [pc, #596]	; (8000614 <FSM_Automatic_Run+0x35c>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	2002      	movs	r0, #2
 80003ce:	f000 fd3b 	bl	8000e48 <setTimer>

			updateLedBuffer(2, yellowDuration / 10);
 80003d2:	4b90      	ldr	r3, [pc, #576]	; (8000614 <FSM_Automatic_Run+0x35c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a8e      	ldr	r2, [pc, #568]	; (8000610 <FSM_Automatic_Run+0x358>)
 80003d8:	fb82 1203 	smull	r1, r2, r2, r3
 80003dc:	1092      	asrs	r2, r2, #2
 80003de:	17db      	asrs	r3, r3, #31
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	4619      	mov	r1, r3
 80003e4:	2002      	movs	r0, #2
 80003e6:	f000 fbd5 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(3, yellowDuration % 10);
 80003ea:	4b8a      	ldr	r3, [pc, #552]	; (8000614 <FSM_Automatic_Run+0x35c>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	4b88      	ldr	r3, [pc, #544]	; (8000610 <FSM_Automatic_Run+0x358>)
 80003f0:	fb83 1302 	smull	r1, r3, r3, r2
 80003f4:	1099      	asrs	r1, r3, #2
 80003f6:	17d3      	asrs	r3, r2, #31
 80003f8:	1ac9      	subs	r1, r1, r3
 80003fa:	460b      	mov	r3, r1
 80003fc:	009b      	lsls	r3, r3, #2
 80003fe:	440b      	add	r3, r1
 8000400:	005b      	lsls	r3, r3, #1
 8000402:	1ad1      	subs	r1, r2, r3
 8000404:	2003      	movs	r0, #3
 8000406:	f000 fbc5 	bl	8000b94 <updateLedBuffer>
		}
		break;
 800040a:	e107      	b.n	800061c <FSM_Automatic_Run+0x364>

	case RED_YELLOW:
		setLightWay1(RESET, SET, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	2101      	movs	r1, #1
 8000410:	2000      	movs	r0, #0
 8000412:	f000 fe0b 	bl	800102c <setLightWay1>
		setLightWay2(SET, RESET, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2100      	movs	r1, #0
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fe28 	bl	8001070 <setLightWay2>

		if (isTimerExpired(2) == 1) {
 8000420:	2002      	movs	r0, #2
 8000422:	f000 fd31 	bl	8000e88 <isTimerExpired>
 8000426:	4603      	mov	r3, r0
 8000428:	2b01      	cmp	r3, #1
 800042a:	f040 80f9 	bne.w	8000620 <FSM_Automatic_Run+0x368>
			status = GREEN_RED;
 800042e:	4b75      	ldr	r3, [pc, #468]	; (8000604 <FSM_Automatic_Run+0x34c>)
 8000430:	2204      	movs	r2, #4
 8000432:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000 * greenDuration);
 8000434:	4b75      	ldr	r3, [pc, #468]	; (800060c <FSM_Automatic_Run+0x354>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800043c:	fb02 f303 	mul.w	r3, r2, r3
 8000440:	4619      	mov	r1, r3
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fd00 	bl	8000e48 <setTimer>
			setTimer(2, 1000 * redDuration);
 8000448:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <FSM_Automatic_Run+0x350>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000450:	fb02 f303 	mul.w	r3, r2, r3
 8000454:	4619      	mov	r1, r3
 8000456:	2002      	movs	r0, #2
 8000458:	f000 fcf6 	bl	8000e48 <setTimer>

			updateLedBuffer(0, greenDuration / 10);
 800045c:	4b6b      	ldr	r3, [pc, #428]	; (800060c <FSM_Automatic_Run+0x354>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a6b      	ldr	r2, [pc, #428]	; (8000610 <FSM_Automatic_Run+0x358>)
 8000462:	fb82 1203 	smull	r1, r2, r2, r3
 8000466:	1092      	asrs	r2, r2, #2
 8000468:	17db      	asrs	r3, r3, #31
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	4619      	mov	r1, r3
 800046e:	2000      	movs	r0, #0
 8000470:	f000 fb90 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(1, greenDuration % 10);
 8000474:	4b65      	ldr	r3, [pc, #404]	; (800060c <FSM_Automatic_Run+0x354>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b65      	ldr	r3, [pc, #404]	; (8000610 <FSM_Automatic_Run+0x358>)
 800047a:	fb83 1302 	smull	r1, r3, r3, r2
 800047e:	1099      	asrs	r1, r3, #2
 8000480:	17d3      	asrs	r3, r2, #31
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	460b      	mov	r3, r1
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	440b      	add	r3, r1
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1ad1      	subs	r1, r2, r3
 800048e:	2001      	movs	r0, #1
 8000490:	f000 fb80 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(2, redDuration / 10);
 8000494:	4b5c      	ldr	r3, [pc, #368]	; (8000608 <FSM_Automatic_Run+0x350>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a5d      	ldr	r2, [pc, #372]	; (8000610 <FSM_Automatic_Run+0x358>)
 800049a:	fb82 1203 	smull	r1, r2, r2, r3
 800049e:	1092      	asrs	r2, r2, #2
 80004a0:	17db      	asrs	r3, r3, #31
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	4619      	mov	r1, r3
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 fb74 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(3, redDuration % 10);
 80004ac:	4b56      	ldr	r3, [pc, #344]	; (8000608 <FSM_Automatic_Run+0x350>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b57      	ldr	r3, [pc, #348]	; (8000610 <FSM_Automatic_Run+0x358>)
 80004b2:	fb83 1302 	smull	r1, r3, r3, r2
 80004b6:	1099      	asrs	r1, r3, #2
 80004b8:	17d3      	asrs	r3, r2, #31
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	460b      	mov	r3, r1
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	440b      	add	r3, r1
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	1ad1      	subs	r1, r2, r3
 80004c6:	2003      	movs	r0, #3
 80004c8:	f000 fb64 	bl	8000b94 <updateLedBuffer>
		}
		break;
 80004cc:	e0a8      	b.n	8000620 <FSM_Automatic_Run+0x368>

	case GREEN_RED:
		setLightWay1(SET, SET, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2101      	movs	r1, #1
 80004d2:	2001      	movs	r0, #1
 80004d4:	f000 fdaa 	bl	800102c <setLightWay1>
		setLightWay2(RESET, SET, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 fdc7 	bl	8001070 <setLightWay2>

		if (isTimerExpired(1) == 1) {
 80004e2:	2001      	movs	r0, #1
 80004e4:	f000 fcd0 	bl	8000e88 <isTimerExpired>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	f040 809a 	bne.w	8000624 <FSM_Automatic_Run+0x36c>
			status = YELLOW_RED;
 80004f0:	4b44      	ldr	r3, [pc, #272]	; (8000604 <FSM_Automatic_Run+0x34c>)
 80004f2:	2205      	movs	r2, #5
 80004f4:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000 * yellowDuration);
 80004f6:	4b47      	ldr	r3, [pc, #284]	; (8000614 <FSM_Automatic_Run+0x35c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	4619      	mov	r1, r3
 8000504:	2001      	movs	r0, #1
 8000506:	f000 fc9f 	bl	8000e48 <setTimer>

			updateLedBuffer(0, yellowDuration / 10);
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <FSM_Automatic_Run+0x35c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4a40      	ldr	r2, [pc, #256]	; (8000610 <FSM_Automatic_Run+0x358>)
 8000510:	fb82 1203 	smull	r1, r2, r2, r3
 8000514:	1092      	asrs	r2, r2, #2
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	4619      	mov	r1, r3
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fb39 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(1, yellowDuration % 10);
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <FSM_Automatic_Run+0x35c>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <FSM_Automatic_Run+0x358>)
 8000528:	fb83 1302 	smull	r1, r3, r3, r2
 800052c:	1099      	asrs	r1, r3, #2
 800052e:	17d3      	asrs	r3, r2, #31
 8000530:	1ac9      	subs	r1, r1, r3
 8000532:	460b      	mov	r3, r1
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	440b      	add	r3, r1
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	1ad1      	subs	r1, r2, r3
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fb29 	bl	8000b94 <updateLedBuffer>
		}
		break;
 8000542:	e06f      	b.n	8000624 <FSM_Automatic_Run+0x36c>

	case YELLOW_RED:
		setLightWay1(SET, RESET, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f000 fd6f 	bl	800102c <setLightWay1>
		setLightWay2(RESET, SET, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2101      	movs	r1, #1
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fd8c 	bl	8001070 <setLightWay2>

		if (isTimerExpired(1) == 1) {
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fc95 	bl	8000e88 <isTimerExpired>
 800055e:	4603      	mov	r3, r0
 8000560:	2b01      	cmp	r3, #1
 8000562:	d161      	bne.n	8000628 <FSM_Automatic_Run+0x370>
			status = RED_GREEN;
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <FSM_Automatic_Run+0x34c>)
 8000566:	2202      	movs	r2, #2
 8000568:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000 * redDuration);
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <FSM_Automatic_Run+0x350>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000572:	fb02 f303 	mul.w	r3, r2, r3
 8000576:	4619      	mov	r1, r3
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fc65 	bl	8000e48 <setTimer>
			setTimer(2, 1000 * greenDuration);
 800057e:	4b23      	ldr	r3, [pc, #140]	; (800060c <FSM_Automatic_Run+0x354>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000586:	fb02 f303 	mul.w	r3, r2, r3
 800058a:	4619      	mov	r1, r3
 800058c:	2002      	movs	r0, #2
 800058e:	f000 fc5b 	bl	8000e48 <setTimer>

			updateLedBuffer(0, redDuration / 10);
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <FSM_Automatic_Run+0x350>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <FSM_Automatic_Run+0x358>)
 8000598:	fb82 1203 	smull	r1, r2, r2, r3
 800059c:	1092      	asrs	r2, r2, #2
 800059e:	17db      	asrs	r3, r3, #31
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	4619      	mov	r1, r3
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 faf5 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(1, redDuration % 10);
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <FSM_Automatic_Run+0x350>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <FSM_Automatic_Run+0x358>)
 80005b0:	fb83 1302 	smull	r1, r3, r3, r2
 80005b4:	1099      	asrs	r1, r3, #2
 80005b6:	17d3      	asrs	r3, r2, #31
 80005b8:	1ac9      	subs	r1, r1, r3
 80005ba:	460b      	mov	r3, r1
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	440b      	add	r3, r1
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	1ad1      	subs	r1, r2, r3
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fae5 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(2, greenDuration / 10);
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <FSM_Automatic_Run+0x354>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <FSM_Automatic_Run+0x358>)
 80005d0:	fb82 1203 	smull	r1, r2, r2, r3
 80005d4:	1092      	asrs	r2, r2, #2
 80005d6:	17db      	asrs	r3, r3, #31
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	2002      	movs	r0, #2
 80005de:	f000 fad9 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(3, greenDuration % 10);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <FSM_Automatic_Run+0x354>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <FSM_Automatic_Run+0x358>)
 80005e8:	fb83 1302 	smull	r1, r3, r3, r2
 80005ec:	1099      	asrs	r1, r3, #2
 80005ee:	17d3      	asrs	r3, r2, #31
 80005f0:	1ac9      	subs	r1, r1, r3
 80005f2:	460b      	mov	r3, r1
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	440b      	add	r3, r1
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	1ad1      	subs	r1, r2, r3
 80005fc:	2003      	movs	r0, #3
 80005fe:	f000 fac9 	bl	8000b94 <updateLedBuffer>
		}
		break;
 8000602:	e011      	b.n	8000628 <FSM_Automatic_Run+0x370>
 8000604:	20000094 	.word	0x20000094
 8000608:	20000014 	.word	0x20000014
 800060c:	2000001c 	.word	0x2000001c
 8000610:	66666667 	.word	0x66666667
 8000614:	20000018 	.word	0x20000018

	default:
		break;
 8000618:	bf00      	nop
 800061a:	e006      	b.n	800062a <FSM_Automatic_Run+0x372>
		break;
 800061c:	bf00      	nop
 800061e:	e004      	b.n	800062a <FSM_Automatic_Run+0x372>
		break;
 8000620:	bf00      	nop
 8000622:	e002      	b.n	800062a <FSM_Automatic_Run+0x372>
		break;
 8000624:	bf00      	nop
 8000626:	e000      	b.n	800062a <FSM_Automatic_Run+0x372>
		break;
 8000628:	bf00      	nop
	}

	if (status != INIT) {
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <FSM_Automatic_Run+0x3ec>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d036      	beq.n	80006a0 <FSM_Automatic_Run+0x3e8>
		// Scan 4 7-segment LEDs with the frequency of 0.5Hz
		if (isTimerExpired(3) == 1) {
 8000632:	2003      	movs	r0, #3
 8000634:	f000 fc28 	bl	8000e88 <isTimerExpired>
 8000638:	4603      	mov	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d117      	bne.n	800066e <FSM_Automatic_Run+0x3b6>
			update7SEG(index_led++);
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <FSM_Automatic_Run+0x3f0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	4918      	ldr	r1, [pc, #96]	; (80006a8 <FSM_Automatic_Run+0x3f0>)
 8000646:	600a      	str	r2, [r1, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fa0d 	bl	8000a68 <update7SEG>
			index_led = index_led % 4;
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <FSM_Automatic_Run+0x3f0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	425a      	negs	r2, r3
 8000654:	f003 0303 	and.w	r3, r3, #3
 8000658:	f002 0203 	and.w	r2, r2, #3
 800065c:	bf58      	it	pl
 800065e:	4253      	negpl	r3, r2
 8000660:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <FSM_Automatic_Run+0x3f0>)
 8000662:	6013      	str	r3, [r2, #0]
			setTimer(3, 500);
 8000664:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000668:	2003      	movs	r0, #3
 800066a:	f000 fbed 	bl	8000e48 <setTimer>
		}

		// Count down the duration for displaying on 7-segment LEDs
		if (isTimerExpired(4) == 1) {
 800066e:	2004      	movs	r0, #4
 8000670:	f000 fc0a 	bl	8000e88 <isTimerExpired>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d112      	bne.n	80006a0 <FSM_Automatic_Run+0x3e8>
			updateLedBuffer(1, led_buffer[1] - 1);
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <FSM_Automatic_Run+0x3f4>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	4619      	mov	r1, r3
 8000682:	2001      	movs	r0, #1
 8000684:	f000 fa86 	bl	8000b94 <updateLedBuffer>
			updateLedBuffer(3, led_buffer[3] - 1);
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <FSM_Automatic_Run+0x3f4>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	3b01      	subs	r3, #1
 800068e:	4619      	mov	r1, r3
 8000690:	2003      	movs	r0, #3
 8000692:	f000 fa7f 	bl	8000b94 <updateLedBuffer>
			setTimer(4, 1000);
 8000696:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800069a:	2004      	movs	r0, #4
 800069c:	f000 fbd4 	bl	8000e48 <setTimer>
		}
	}
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000094 	.word	0x20000094
 80006a8:	20000090 	.word	0x20000090
 80006ac:	20000098 	.word	0x20000098

080006b0 <display7SEG>:
/**
 * @brief	Display number on 7-segment LED
 * @param	num : The number displayed on LED
 * @retval	None
 */
void display7SEG(int num) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	switch (num) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b09      	cmp	r3, #9
 80006bc:	f200 8180 	bhi.w	80009c0 <display7SEG+0x310>
 80006c0:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <display7SEG+0x18>)
 80006c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c6:	bf00      	nop
 80006c8:	080006f1 	.word	0x080006f1
 80006cc:	08000739 	.word	0x08000739
 80006d0:	08000781 	.word	0x08000781
 80006d4:	080007c9 	.word	0x080007c9
 80006d8:	08000811 	.word	0x08000811
 80006dc:	08000859 	.word	0x08000859
 80006e0:	080008a1 	.word	0x080008a1
 80006e4:	080008e9 	.word	0x080008e9
 80006e8:	08000931 	.word	0x08000931
 80006ec:	08000979 	.word	0x08000979
	case 0:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	48c6      	ldr	r0, [pc, #792]	; (8000a10 <display7SEG+0x360>)
 80006f6:	f001 f87e 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	48c4      	ldr	r0, [pc, #784]	; (8000a10 <display7SEG+0x360>)
 8000700:	f001 f879 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	2104      	movs	r1, #4
 8000708:	48c1      	ldr	r0, [pc, #772]	; (8000a10 <display7SEG+0x360>)
 800070a:	f001 f874 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	48bf      	ldr	r0, [pc, #764]	; (8000a10 <display7SEG+0x360>)
 8000714:	f001 f86f 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2110      	movs	r1, #16
 800071c:	48bc      	ldr	r0, [pc, #752]	; (8000a10 <display7SEG+0x360>)
 800071e:	f001 f86a 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	48ba      	ldr	r0, [pc, #744]	; (8000a10 <display7SEG+0x360>)
 8000728:	f001 f865 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	48b7      	ldr	r0, [pc, #732]	; (8000a10 <display7SEG+0x360>)
 8000732:	f001 f860 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 8000736:	e167      	b.n	8000a08 <display7SEG+0x358>

	case 1:
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	2102      	movs	r1, #2
 800073c:	48b4      	ldr	r0, [pc, #720]	; (8000a10 <display7SEG+0x360>)
 800073e:	f001 f85a 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2104      	movs	r1, #4
 8000746:	48b2      	ldr	r0, [pc, #712]	; (8000a10 <display7SEG+0x360>)
 8000748:	f001 f855 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	48af      	ldr	r0, [pc, #700]	; (8000a10 <display7SEG+0x360>)
 8000752:	f001 f850 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2108      	movs	r1, #8
 800075a:	48ad      	ldr	r0, [pc, #692]	; (8000a10 <display7SEG+0x360>)
 800075c:	f001 f84b 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	48aa      	ldr	r0, [pc, #680]	; (8000a10 <display7SEG+0x360>)
 8000766:	f001 f846 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2120      	movs	r1, #32
 800076e:	48a8      	ldr	r0, [pc, #672]	; (8000a10 <display7SEG+0x360>)
 8000770:	f001 f841 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	48a5      	ldr	r0, [pc, #660]	; (8000a10 <display7SEG+0x360>)
 800077a:	f001 f83c 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 800077e:	e143      	b.n	8000a08 <display7SEG+0x358>

	case 2:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	2101      	movs	r1, #1
 8000784:	48a2      	ldr	r0, [pc, #648]	; (8000a10 <display7SEG+0x360>)
 8000786:	f001 f836 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2102      	movs	r1, #2
 800078e:	48a0      	ldr	r0, [pc, #640]	; (8000a10 <display7SEG+0x360>)
 8000790:	f001 f831 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	489d      	ldr	r0, [pc, #628]	; (8000a10 <display7SEG+0x360>)
 800079a:	f001 f82c 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	489b      	ldr	r0, [pc, #620]	; (8000a10 <display7SEG+0x360>)
 80007a4:	f001 f827 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4898      	ldr	r0, [pc, #608]	; (8000a10 <display7SEG+0x360>)
 80007ae:	f001 f822 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2104      	movs	r1, #4
 80007b6:	4896      	ldr	r0, [pc, #600]	; (8000a10 <display7SEG+0x360>)
 80007b8:	f001 f81d 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2120      	movs	r1, #32
 80007c0:	4893      	ldr	r0, [pc, #588]	; (8000a10 <display7SEG+0x360>)
 80007c2:	f001 f818 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 80007c6:	e11f      	b.n	8000a08 <display7SEG+0x358>

	case 3:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2101      	movs	r1, #1
 80007cc:	4890      	ldr	r0, [pc, #576]	; (8000a10 <display7SEG+0x360>)
 80007ce:	f001 f812 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2102      	movs	r1, #2
 80007d6:	488e      	ldr	r0, [pc, #568]	; (8000a10 <display7SEG+0x360>)
 80007d8:	f001 f80d 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2104      	movs	r1, #4
 80007e0:	488b      	ldr	r0, [pc, #556]	; (8000a10 <display7SEG+0x360>)
 80007e2:	f001 f808 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2108      	movs	r1, #8
 80007ea:	4889      	ldr	r0, [pc, #548]	; (8000a10 <display7SEG+0x360>)
 80007ec:	f001 f803 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	4886      	ldr	r0, [pc, #536]	; (8000a10 <display7SEG+0x360>)
 80007f6:	f000 fffe 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	4884      	ldr	r0, [pc, #528]	; (8000a10 <display7SEG+0x360>)
 8000800:	f000 fff9 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2120      	movs	r1, #32
 8000808:	4881      	ldr	r0, [pc, #516]	; (8000a10 <display7SEG+0x360>)
 800080a:	f000 fff4 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 800080e:	e0fb      	b.n	8000a08 <display7SEG+0x358>

	case 4:
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2102      	movs	r1, #2
 8000814:	487e      	ldr	r0, [pc, #504]	; (8000a10 <display7SEG+0x360>)
 8000816:	f000 ffee 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2104      	movs	r1, #4
 800081e:	487c      	ldr	r0, [pc, #496]	; (8000a10 <display7SEG+0x360>)
 8000820:	f000 ffe9 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2120      	movs	r1, #32
 8000828:	4879      	ldr	r0, [pc, #484]	; (8000a10 <display7SEG+0x360>)
 800082a:	f000 ffe4 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4877      	ldr	r0, [pc, #476]	; (8000a10 <display7SEG+0x360>)
 8000834:	f000 ffdf 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	4874      	ldr	r0, [pc, #464]	; (8000a10 <display7SEG+0x360>)
 800083e:	f000 ffda 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 8000842:	2201      	movs	r2, #1
 8000844:	2108      	movs	r1, #8
 8000846:	4872      	ldr	r0, [pc, #456]	; (8000a10 <display7SEG+0x360>)
 8000848:	f000 ffd5 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2110      	movs	r1, #16
 8000850:	486f      	ldr	r0, [pc, #444]	; (8000a10 <display7SEG+0x360>)
 8000852:	f000 ffd0 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 8000856:	e0d7      	b.n	8000a08 <display7SEG+0x358>

	case 5:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	486c      	ldr	r0, [pc, #432]	; (8000a10 <display7SEG+0x360>)
 800085e:	f000 ffca 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2104      	movs	r1, #4
 8000866:	486a      	ldr	r0, [pc, #424]	; (8000a10 <display7SEG+0x360>)
 8000868:	f000 ffc5 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2108      	movs	r1, #8
 8000870:	4867      	ldr	r0, [pc, #412]	; (8000a10 <display7SEG+0x360>)
 8000872:	f000 ffc0 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	4865      	ldr	r0, [pc, #404]	; (8000a10 <display7SEG+0x360>)
 800087c:	f000 ffbb 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	4862      	ldr	r0, [pc, #392]	; (8000a10 <display7SEG+0x360>)
 8000886:	f000 ffb6 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 800088a:	2201      	movs	r2, #1
 800088c:	2102      	movs	r1, #2
 800088e:	4860      	ldr	r0, [pc, #384]	; (8000a10 <display7SEG+0x360>)
 8000890:	f000 ffb1 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2110      	movs	r1, #16
 8000898:	485d      	ldr	r0, [pc, #372]	; (8000a10 <display7SEG+0x360>)
 800089a:	f000 ffac 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 800089e:	e0b3      	b.n	8000a08 <display7SEG+0x358>

	case 6:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	485a      	ldr	r0, [pc, #360]	; (8000a10 <display7SEG+0x360>)
 80008a6:	f000 ffa6 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2104      	movs	r1, #4
 80008ae:	4858      	ldr	r0, [pc, #352]	; (8000a10 <display7SEG+0x360>)
 80008b0:	f000 ffa1 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2108      	movs	r1, #8
 80008b8:	4855      	ldr	r0, [pc, #340]	; (8000a10 <display7SEG+0x360>)
 80008ba:	f000 ff9c 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2110      	movs	r1, #16
 80008c2:	4853      	ldr	r0, [pc, #332]	; (8000a10 <display7SEG+0x360>)
 80008c4:	f000 ff97 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2120      	movs	r1, #32
 80008cc:	4850      	ldr	r0, [pc, #320]	; (8000a10 <display7SEG+0x360>)
 80008ce:	f000 ff92 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	484e      	ldr	r0, [pc, #312]	; (8000a10 <display7SEG+0x360>)
 80008d8:	f000 ff8d 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2102      	movs	r1, #2
 80008e0:	484b      	ldr	r0, [pc, #300]	; (8000a10 <display7SEG+0x360>)
 80008e2:	f000 ff88 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 80008e6:	e08f      	b.n	8000a08 <display7SEG+0x358>

	case 7:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2101      	movs	r1, #1
 80008ec:	4848      	ldr	r0, [pc, #288]	; (8000a10 <display7SEG+0x360>)
 80008ee:	f000 ff82 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2102      	movs	r1, #2
 80008f6:	4846      	ldr	r0, [pc, #280]	; (8000a10 <display7SEG+0x360>)
 80008f8:	f000 ff7d 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2104      	movs	r1, #4
 8000900:	4843      	ldr	r0, [pc, #268]	; (8000a10 <display7SEG+0x360>)
 8000902:	f000 ff78 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2108      	movs	r1, #8
 800090a:	4841      	ldr	r0, [pc, #260]	; (8000a10 <display7SEG+0x360>)
 800090c:	f000 ff73 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8000910:	2201      	movs	r2, #1
 8000912:	2110      	movs	r1, #16
 8000914:	483e      	ldr	r0, [pc, #248]	; (8000a10 <display7SEG+0x360>)
 8000916:	f000 ff6e 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 800091a:	2201      	movs	r2, #1
 800091c:	2120      	movs	r1, #32
 800091e:	483c      	ldr	r0, [pc, #240]	; (8000a10 <display7SEG+0x360>)
 8000920:	f000 ff69 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	4839      	ldr	r0, [pc, #228]	; (8000a10 <display7SEG+0x360>)
 800092a:	f000 ff64 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 800092e:	e06b      	b.n	8000a08 <display7SEG+0x358>

	case 8:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2101      	movs	r1, #1
 8000934:	4836      	ldr	r0, [pc, #216]	; (8000a10 <display7SEG+0x360>)
 8000936:	f000 ff5e 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4834      	ldr	r0, [pc, #208]	; (8000a10 <display7SEG+0x360>)
 8000940:	f000 ff59 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	4831      	ldr	r0, [pc, #196]	; (8000a10 <display7SEG+0x360>)
 800094a:	f000 ff54 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2108      	movs	r1, #8
 8000952:	482f      	ldr	r0, [pc, #188]	; (8000a10 <display7SEG+0x360>)
 8000954:	f000 ff4f 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2110      	movs	r1, #16
 800095c:	482c      	ldr	r0, [pc, #176]	; (8000a10 <display7SEG+0x360>)
 800095e:	f000 ff4a 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2120      	movs	r1, #32
 8000966:	482a      	ldr	r0, [pc, #168]	; (8000a10 <display7SEG+0x360>)
 8000968:	f000 ff45 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2140      	movs	r1, #64	; 0x40
 8000970:	4827      	ldr	r0, [pc, #156]	; (8000a10 <display7SEG+0x360>)
 8000972:	f000 ff40 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 8000976:	e047      	b.n	8000a08 <display7SEG+0x358>

	case 9:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2101      	movs	r1, #1
 800097c:	4824      	ldr	r0, [pc, #144]	; (8000a10 <display7SEG+0x360>)
 800097e:	f000 ff3a 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2102      	movs	r1, #2
 8000986:	4822      	ldr	r0, [pc, #136]	; (8000a10 <display7SEG+0x360>)
 8000988:	f000 ff35 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2104      	movs	r1, #4
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <display7SEG+0x360>)
 8000992:	f000 ff30 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	481d      	ldr	r0, [pc, #116]	; (8000a10 <display7SEG+0x360>)
 800099c:	f000 ff2b 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	481a      	ldr	r0, [pc, #104]	; (8000a10 <display7SEG+0x360>)
 80009a6:	f000 ff26 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <display7SEG+0x360>)
 80009b0:	f000 ff21 	bl	80017f6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2110      	movs	r1, #16
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <display7SEG+0x360>)
 80009ba:	f000 ff1c 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 80009be:	e023      	b.n	8000a08 <display7SEG+0x358>

	default:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2101      	movs	r1, #1
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <display7SEG+0x360>)
 80009c6:	f000 ff16 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2102      	movs	r1, #2
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <display7SEG+0x360>)
 80009d0:	f000 ff11 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2104      	movs	r1, #4
 80009d8:	480d      	ldr	r0, [pc, #52]	; (8000a10 <display7SEG+0x360>)
 80009da:	f000 ff0c 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2108      	movs	r1, #8
 80009e2:	480b      	ldr	r0, [pc, #44]	; (8000a10 <display7SEG+0x360>)
 80009e4:	f000 ff07 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2110      	movs	r1, #16
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <display7SEG+0x360>)
 80009ee:	f000 ff02 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2120      	movs	r1, #32
 80009f6:	4806      	ldr	r0, [pc, #24]	; (8000a10 <display7SEG+0x360>)
 80009f8:	f000 fefd 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <display7SEG+0x360>)
 8000a02:	f000 fef8 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 8000a06:	bf00      	nop
	}
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40010c00 	.word	0x40010c00

08000a14 <clear7SEG>:
/**
 * @brief	Clear number on 7-segment LED
 * @param	None
 * @retval	None
 */
void clear7SEG(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <clear7SEG+0x50>)
 8000a1e:	f000 feea 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2102      	movs	r1, #2
 8000a26:	480f      	ldr	r0, [pc, #60]	; (8000a64 <clear7SEG+0x50>)
 8000a28:	f000 fee5 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2104      	movs	r1, #4
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <clear7SEG+0x50>)
 8000a32:	f000 fee0 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2108      	movs	r1, #8
 8000a3a:	480a      	ldr	r0, [pc, #40]	; (8000a64 <clear7SEG+0x50>)
 8000a3c:	f000 fedb 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2110      	movs	r1, #16
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <clear7SEG+0x50>)
 8000a46:	f000 fed6 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <clear7SEG+0x50>)
 8000a50:	f000 fed1 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2140      	movs	r1, #64	; 0x40
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <clear7SEG+0x50>)
 8000a5a:	f000 fecc 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010c00 	.word	0x40010c00

08000a68 <update7SEG>:
/**
 * @brief	Update the 7-segment LEDs based on an array of 4 integer numbers
 * @param	index : The index of LED displayed
 * @retval	None
 */
void update7SEG(int index) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	switch(index) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	f200 8084 	bhi.w	8000b80 <update7SEG+0x118>
 8000a78:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <update7SEG+0x18>)
 8000a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7e:	bf00      	nop
 8000a80:	08000a91 	.word	0x08000a91
 8000a84:	08000acd 	.word	0x08000acd
 8000a88:	08000b09 	.word	0x08000b09
 8000a8c:	08000b45 	.word	0x08000b45
	case 0:
		// Display the first 7SEG with led_buffer[0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	483d      	ldr	r0, [pc, #244]	; (8000b8c <update7SEG+0x124>)
 8000a98:	f000 fead 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa2:	483a      	ldr	r0, [pc, #232]	; (8000b8c <update7SEG+0x124>)
 8000aa4:	f000 fea7 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	4837      	ldr	r0, [pc, #220]	; (8000b8c <update7SEG+0x124>)
 8000ab0:	f000 fea1 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aba:	4834      	ldr	r0, [pc, #208]	; (8000b8c <update7SEG+0x124>)
 8000abc:	f000 fe9b 	bl	80017f6 <HAL_GPIO_WritePin>

		display7SEG(led_buffer[0]);
 8000ac0:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <update7SEG+0x128>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fdf3 	bl	80006b0 <display7SEG>
		break;
 8000aca:	e05a      	b.n	8000b82 <update7SEG+0x11a>

	case 1:
		// Display the second 7SEG with led_buffer[1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad2:	482e      	ldr	r0, [pc, #184]	; (8000b8c <update7SEG+0x124>)
 8000ad4:	f000 fe8f 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ade:	482b      	ldr	r0, [pc, #172]	; (8000b8c <update7SEG+0x124>)
 8000ae0:	f000 fe89 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	4828      	ldr	r0, [pc, #160]	; (8000b8c <update7SEG+0x124>)
 8000aec:	f000 fe83 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af6:	4825      	ldr	r0, [pc, #148]	; (8000b8c <update7SEG+0x124>)
 8000af8:	f000 fe7d 	bl	80017f6 <HAL_GPIO_WritePin>

		display7SEG(led_buffer[1]);
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <update7SEG+0x128>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fdd5 	bl	80006b0 <display7SEG>
		break;
 8000b06:	e03c      	b.n	8000b82 <update7SEG+0x11a>

	case 2:
		// Display the third 7SEG with led_buffer[2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	481f      	ldr	r0, [pc, #124]	; (8000b8c <update7SEG+0x124>)
 8000b10:	f000 fe71 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1a:	481c      	ldr	r0, [pc, #112]	; (8000b8c <update7SEG+0x124>)
 8000b1c:	f000 fe6b 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b26:	4819      	ldr	r0, [pc, #100]	; (8000b8c <update7SEG+0x124>)
 8000b28:	f000 fe65 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b32:	4816      	ldr	r0, [pc, #88]	; (8000b8c <update7SEG+0x124>)
 8000b34:	f000 fe5f 	bl	80017f6 <HAL_GPIO_WritePin>

		display7SEG(led_buffer[2]);
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <update7SEG+0x128>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fdb7 	bl	80006b0 <display7SEG>
		break;
 8000b42:	e01e      	b.n	8000b82 <update7SEG+0x11a>

	case 3:
		// Display the forth 7SEG with led_buffer[3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b4a:	4810      	ldr	r0, [pc, #64]	; (8000b8c <update7SEG+0x124>)
 8000b4c:	f000 fe53 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <update7SEG+0x124>)
 8000b58:	f000 fe4d 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <update7SEG+0x124>)
 8000b64:	f000 fe47 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <update7SEG+0x124>)
 8000b70:	f000 fe41 	bl	80017f6 <HAL_GPIO_WritePin>

		display7SEG(led_buffer[3]);
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <update7SEG+0x128>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fd99 	bl	80006b0 <display7SEG>
		break;
 8000b7e:	e000      	b.n	8000b82 <update7SEG+0x11a>

	default:
		break;
 8000b80:	bf00      	nop
	}
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	20000098 	.word	0x20000098

08000b94 <updateLedBuffer>:
 * @brief	Update the led buffer at the index position with the input value
 * @param	index : The index of led buffer
 *			value : The updated value
 * @retval	None
 */
void updateLedBuffer(int index, int value) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	if (value <= 0) {
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	dc05      	bgt.n	8000bb0 <updateLedBuffer+0x1c>
		led_buffer[index] = 0;
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <updateLedBuffer+0x30>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	} else {
		led_buffer[index] = value;
	}
}
 8000bae:	e004      	b.n	8000bba <updateLedBuffer+0x26>
		led_buffer[index] = value;
 8000bb0:	4904      	ldr	r1, [pc, #16]	; (8000bc4 <updateLedBuffer+0x30>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000098 	.word	0x20000098

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fb10 	bl	80011f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f816 	bl	8000c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f000 f89c 	bl	8000d10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bd8:	f000 f84e 	bl	8000c78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_system();
 8000bdc:	f000 f8fa 	bl	8000dd4 <init_system>
  {
//	  if (isTimerExpired(5) == 1) {
//		  setTimer(5, 1000);
//		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  }
	  if (isButtonPressed(0) == 1) {
 8000be0:	2000      	movs	r0, #0
 8000be2:	f7ff fab3 	bl	800014c <isButtonPressed>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d103      	bne.n	8000bf4 <main+0x2c>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <main+0x34>)
 8000bf0:	f000 fe19 	bl	8001826 <HAL_GPIO_TogglePin>
	  }
	  FSM_Automatic_Run();
 8000bf4:	f7ff fb60 	bl	80002b8 <FSM_Automatic_Run>
	  if (isButtonPressed(0) == 1) {
 8000bf8:	e7f2      	b.n	8000be0 <main+0x18>
 8000bfa:	bf00      	nop
 8000bfc:	40010800 	.word	0x40010800

08000c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b090      	sub	sp, #64	; 0x40
 8000c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fddc 	bl	80027cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c26:	2301      	movs	r3, #1
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fe0e 	bl	8001858 <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c42:	f000 f8fb 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 f87c 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 f8e7 	bl	8000e3c <Error_Handler>
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3740      	adds	r7, #64	; 0x40
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000c9e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cac:	2209      	movs	r2, #9
 8000cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cbc:	4813      	ldr	r0, [pc, #76]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cbe:	f001 f9a9 	bl	8002014 <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc8:	f000 f8b8 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cda:	f001 fb27 	bl	800232c <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce4:	f000 f8aa 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_TIM2_Init+0x94>)
 8000cf6:	f001 fcff 	bl	80026f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f000 f89c 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000a8 	.word	0x200000a8

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0308 	add.w	r3, r7, #8
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_GPIO_Init+0xb8>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <MX_GPIO_Init+0xb8>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_GPIO_Init+0xb8>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0xb8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_GPIO_Init+0xb8>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <MX_GPIO_Init+0xb8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_1_Pin|YEL_LED_1_Pin|GRN_LED_1_Pin|RED_LED_2_Pin
 8000d54:	2200      	movs	r2, #0
 8000d56:	f640 71bf 	movw	r1, #4031	; 0xfbf
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d5c:	f000 fd4b 	bl	80017f6 <HAL_GPIO_WritePin>
                          |YEL_LED_2_Pin|GRN_LED_2_Pin|LED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_a_Pin|LED7_b_Pin|LED7_c_Pin|LED7_d_Pin
 8000d60:	2200      	movs	r2, #0
 8000d62:	217f      	movs	r1, #127	; 0x7f
 8000d64:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000d66:	f000 fd46 	bl	80017f6 <HAL_GPIO_WritePin>
                          |LED7_e_Pin|LED7_f_Pin|LED7_g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_LED_1_Pin YEL_LED_1_Pin GRN_LED_1_Pin RED_LED_2_Pin
                           YEL_LED_2_Pin GRN_LED_2_Pin LED_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_LED_1_Pin|YEL_LED_1_Pin|GRN_LED_1_Pin|RED_LED_2_Pin
 8000d6a:	f640 73bf 	movw	r3, #4031	; 0xfbf
 8000d6e:	60bb      	str	r3, [r7, #8]
                          |YEL_LED_2_Pin|GRN_LED_2_Pin|LED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <MX_GPIO_Init+0xbc>)
 8000d84:	f000 fba4 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_a_Pin LED7_b_Pin LED7_c_Pin LED7_d_Pin
                           LED7_e_Pin LED7_f_Pin LED7_g_Pin */
  GPIO_InitStruct.Pin = LED7_a_Pin|LED7_b_Pin|LED7_c_Pin|LED7_d_Pin
 8000d88:	237f      	movs	r3, #127	; 0x7f
 8000d8a:	60bb      	str	r3, [r7, #8]
                          |LED7_e_Pin|LED7_f_Pin|LED7_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000da0:	f000 fb96 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000da4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_GPIO_Init+0xc0>)
 8000dba:	f000 fb89 	bl	80014d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00

08000dd4 <init_system>:

/* USER CODE BEGIN 4 */
void init_system(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000dd8:	480f      	ldr	r0, [pc, #60]	; (8000e18 <init_system+0x44>)
 8000dda:	f001 f96b 	bl	80020b4 <HAL_TIM_Base_Start_IT>
	clear7SEG();
 8000dde:	f7ff fe19 	bl	8000a14 <clear7SEG>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <init_system+0x48>)
 8000dea:	f000 fd04 	bl	80017f6 <HAL_GPIO_WritePin>
	status = INIT;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <init_system+0x4c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]
	setTimer(3, 500);
 8000df4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f825 	bl	8000e48 <setTimer>
	setTimer(4, 1000);
 8000dfe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e02:	2004      	movs	r0, #4
 8000e04:	f000 f820 	bl	8000e48 <setTimer>
	setTimer(5, 1000);
 8000e08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e0c:	2005      	movs	r0, #5
 8000e0e:	f000 f81b 	bl	8000e48 <setTimer>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000a8 	.word	0x200000a8
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	20000094 	.word	0x20000094

08000e24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e2c:	f000 f840 	bl	8000eb0 <timerRun>
	getKeyInput();
 8000e30:	f7ff f9a6 	bl	8000180 <getKeyInput>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <setTimer>:
 * @brief	Set duration of software timer interrupt at the index position
 * @param	index : The index of current timer
 * 			duration : Duration of software timer interrupt
 * @retval 	None
 */
void setTimer(int index, int duration) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_CYCLE;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <setTimer+0x34>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	1092      	asrs	r2, r2, #2
 8000e5c:	17db      	asrs	r3, r3, #31
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <setTimer+0x38>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <setTimer+0x3c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	66666667 	.word	0x66666667
 8000e80:	20000118 	.word	0x20000118
 8000e84:	200000f0 	.word	0x200000f0

08000e88 <isTimerExpired>:
/**
 * @brief	Check if the index timer is expired or not
 * @param	index : The index of current timer
 * @retval	1 if the timer is expired (flag = 1) or 0 if it is not (flag = 0)
 */
int isTimerExpired(int index) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <isTimerExpired+0x24>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d101      	bne.n	8000ea0 <isTimerExpired+0x18>
		return 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <isTimerExpired+0x1a>
	}
	return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	200000f0 	.word	0x200000f0

08000eb0 <timerRun>:
/**
 * @brief	Run the timer
 * @param	None
 * @retval	None
 */
void timerRun(void) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_TIMER; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	e01c      	b.n	8000ef6 <timerRun+0x46>
		if (timer_counter[i] > 0) {
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <timerRun+0x58>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dd13      	ble.n	8000ef0 <timerRun+0x40>
			timer_counter[i]--;
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <timerRun+0x58>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	490d      	ldr	r1, [pc, #52]	; (8000f08 <timerRun+0x58>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <timerRun+0x58>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	dc04      	bgt.n	8000ef0 <timerRun+0x40>
				timer_flag[i] = 1;
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <timerRun+0x5c>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2101      	movs	r1, #1
 8000eec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_TIMER; i++) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b09      	cmp	r3, #9
 8000efa:	dddf      	ble.n	8000ebc <timerRun+0xc>
			}
		}
	}
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000118 	.word	0x20000118
 8000f0c:	200000f0 	.word	0x200000f0

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_MspInit+0x5c>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_MspInit+0x60>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_MspInit+0x60>)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000

08000f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f84:	d113      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_TIM_Base_MspInit+0x44>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f000 fa5d 	bl	8001462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa8:	201c      	movs	r0, #28
 8000faa:	f000 fa76 	bl	800149a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <MemManage_Handler+0x4>

08000fce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <BusFault_Handler+0x4>

08000fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <UsageFault_Handler+0x4>

08000fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 f93b 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <TIM2_IRQHandler+0x10>)
 8001012:	f001 f89b 	bl	800214c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000a8 	.word	0x200000a8

08001020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <setLightWay1>:
/**
 * @brief	Control the traffic light on way 1 (vertical)
 * @param	red, yellow, green : The status of 3 LEDs: red, yellow and green
 * @retval	None
 */
void setLightWay1(int red, int yellow, int green) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin, red);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	2101      	movs	r1, #1
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <setLightWay1+0x40>)
 8001042:	f000 fbd8 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin, yellow);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	2102      	movs	r1, #2
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <setLightWay1+0x40>)
 8001050:	f000 fbd1 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin, green);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	2104      	movs	r1, #4
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <setLightWay1+0x40>)
 800105e:	f000 fbca 	bl	80017f6 <HAL_GPIO_WritePin>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010800 	.word	0x40010800

08001070 <setLightWay2>:
/**
 * @brief	Control the traffic light on way 2 (horizontal)
 * @param	red, yellow, green : The status of 3 LEDs: red, yellow and green
 * @retval	None
 */
void setLightWay2(int red, int yellow, int green) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin, red);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	2108      	movs	r1, #8
 8001084:	480a      	ldr	r0, [pc, #40]	; (80010b0 <setLightWay2+0x40>)
 8001086:	f000 fbb6 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin, yellow);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	2110      	movs	r1, #16
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <setLightWay2+0x40>)
 8001094:	f000 fbaf 	bl	80017f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin, green);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	2120      	movs	r1, #32
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <setLightWay2+0x40>)
 80010a2:	f000 fba8 	bl	80017f6 <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40010800 	.word	0x40010800

080010b4 <setAllRedLED>:
/**
 * @brief	Turn ON and OFF all red LEDs
 * @param	LEDstatus : The state of red LEDs (ON / OFF)
 * @retval	None
 */
void setAllRedLED(int LEDstatus) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	switch (LEDstatus) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00d      	beq.n	80010de <setAllRedLED+0x2a>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d115      	bne.n	80010f4 <setAllRedLED+0x40>
	case ON:
		HAL_GPIO_WritePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin, RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <setAllRedLED+0x4c>)
 80010ce:	f000 fb92 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2108      	movs	r1, #8
 80010d6:	480a      	ldr	r0, [pc, #40]	; (8001100 <setAllRedLED+0x4c>)
 80010d8:	f000 fb8d 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 80010dc:	e00b      	b.n	80010f6 <setAllRedLED+0x42>

	case OFF:
		HAL_GPIO_WritePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin, SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2101      	movs	r1, #1
 80010e2:	4807      	ldr	r0, [pc, #28]	; (8001100 <setAllRedLED+0x4c>)
 80010e4:	f000 fb87 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin, SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2108      	movs	r1, #8
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <setAllRedLED+0x4c>)
 80010ee:	f000 fb82 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 80010f2:	e000      	b.n	80010f6 <setAllRedLED+0x42>

	default:
		break;
 80010f4:	bf00      	nop
	}
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40010800 	.word	0x40010800

08001104 <setAllYellowLED>:
/**
 * @brief	Turn ON and OFF all yellow LEDs
 * @param	LEDstatus : The state of yellow LEDs (ON / OFF)
 * @retval	None
 */
void setAllYellowLED(int LEDstatus) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	switch (LEDstatus) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00d      	beq.n	800112e <setAllYellowLED+0x2a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d115      	bne.n	8001144 <setAllYellowLED+0x40>
	case ON:
		HAL_GPIO_WritePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin, RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2102      	movs	r1, #2
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <setAllYellowLED+0x4c>)
 800111e:	f000 fb6a 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin, RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2110      	movs	r1, #16
 8001126:	480a      	ldr	r0, [pc, #40]	; (8001150 <setAllYellowLED+0x4c>)
 8001128:	f000 fb65 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 800112c:	e00b      	b.n	8001146 <setAllYellowLED+0x42>

	case OFF:
		HAL_GPIO_WritePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin, SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2102      	movs	r1, #2
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <setAllYellowLED+0x4c>)
 8001134:	f000 fb5f 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin, SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2110      	movs	r1, #16
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <setAllYellowLED+0x4c>)
 800113e:	f000 fb5a 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 8001142:	e000      	b.n	8001146 <setAllYellowLED+0x42>

	default:
		break;
 8001144:	bf00      	nop
	}
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40010800 	.word	0x40010800

08001154 <setAllGreenLED>:
/**
 * @brief	Turn ON and OFF all green LEDs
 * @param	LEDstatus : The state of green LEDs (ON / OFF)
 * @retval	None
 */
void setAllGreenLED(int LEDstatus) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	switch (LEDstatus) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00d      	beq.n	800117e <setAllGreenLED+0x2a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d115      	bne.n	8001194 <setAllGreenLED+0x40>
	case ON:
		HAL_GPIO_WritePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2104      	movs	r1, #4
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <setAllGreenLED+0x4c>)
 800116e:	f000 fb42 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2120      	movs	r1, #32
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <setAllGreenLED+0x4c>)
 8001178:	f000 fb3d 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 800117c:	e00b      	b.n	8001196 <setAllGreenLED+0x42>

	case OFF:
		HAL_GPIO_WritePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin, SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2104      	movs	r1, #4
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <setAllGreenLED+0x4c>)
 8001184:	f000 fb37 	bl	80017f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin, SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2120      	movs	r1, #32
 800118c:	4804      	ldr	r0, [pc, #16]	; (80011a0 <setAllGreenLED+0x4c>)
 800118e:	f000 fb32 	bl	80017f6 <HAL_GPIO_WritePin>
		break;
 8001192:	e000      	b.n	8001196 <setAllGreenLED+0x42>

	default:
		break;
 8001194:	bf00      	nop
	}
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800

080011a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a4:	f7ff ff3c 	bl	8001020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011aa:	490c      	ldr	r1, [pc, #48]	; (80011dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c0:	4c09      	ldr	r4, [pc, #36]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ce:	f001 fb05 	bl	80027dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d2:	f7ff fcf9 	bl	8000bc8 <main>
  bx lr
 80011d6:	4770      	bx	lr
  ldr r0, =_sdata
 80011d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011dc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80011e0:	08002868 	.word	0x08002868
  ldr r2, =_sbss
 80011e4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80011e8:	20000144 	.word	0x20000144

080011ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ec:	e7fe      	b.n	80011ec <ADC1_2_IRQHandler>
	...

080011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x28>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x28>)
 80011fa:	f043 0310 	orr.w	r3, r3, #16
 80011fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f923 	bl	800144c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fe80 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f93b 	bl	80014b6 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f903 	bl	8001462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000020 	.word	0x20000020
 8001274:	20000028 	.word	0x20000028
 8001278:	20000024 	.word	0x20000024

0800127c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_IncTick+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_IncTick+0x20>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <HAL_IncTick+0x20>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	20000028 	.word	0x20000028
 800129c:	20000140 	.word	0x20000140

080012a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return uwTick;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_GetTick+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000140 	.word	0x20000140

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <__NVIC_EnableIRQ+0x34>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	6039      	str	r1, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	db0a      	blt.n	800137a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	490c      	ldr	r1, [pc, #48]	; (800139c <__NVIC_SetPriority+0x4c>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	440b      	add	r3, r1
 8001374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001378:	e00a      	b.n	8001390 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	b2da      	uxtb	r2, r3
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <__NVIC_SetPriority+0x50>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	3b04      	subs	r3, #4
 8001388:	0112      	lsls	r2, r2, #4
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	440b      	add	r3, r1
 800138e:	761a      	strb	r2, [r3, #24]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b089      	sub	sp, #36	; 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f1c3 0307 	rsb	r3, r3, #7
 80013be:	2b04      	cmp	r3, #4
 80013c0:	bf28      	it	cs
 80013c2:	2304      	movcs	r3, #4
 80013c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d902      	bls.n	80013d4 <NVIC_EncodePriority+0x30>
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	3b03      	subs	r3, #3
 80013d2:	e000      	b.n	80013d6 <NVIC_EncodePriority+0x32>
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	401a      	ands	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ec:	f04f 31ff 	mov.w	r1, #4294967295
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	4313      	orrs	r3, r2
         );
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3724      	adds	r7, #36	; 0x24
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001418:	d301      	bcc.n	800141e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800141a:	2301      	movs	r3, #1
 800141c:	e00f      	b.n	800143e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <SysTick_Config+0x40>)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001426:	210f      	movs	r1, #15
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f7ff ff90 	bl	8001350 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <SysTick_Config+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SysTick_Config+0x40>)
 8001438:	2207      	movs	r2, #7
 800143a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	e000e010 	.word	0xe000e010

0800144c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ff2d 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001462:	b580      	push	{r7, lr}
 8001464:	b086      	sub	sp, #24
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001474:	f7ff ff42 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6978      	ldr	r0, [r7, #20]
 8001480:	f7ff ff90 	bl	80013a4 <NVIC_EncodePriority>
 8001484:	4602      	mov	r2, r0
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5f 	bl	8001350 <__NVIC_SetPriority>
}
 8001492:	bf00      	nop
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff35 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ffa2 	bl	8001408 <SysTick_Config>
 80014c4:	4603      	mov	r3, r0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b08b      	sub	sp, #44	; 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e161      	b.n	80017a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e4:	2201      	movs	r2, #1
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8150 	bne.w	80017a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a97      	ldr	r2, [pc, #604]	; (8001764 <HAL_GPIO_Init+0x294>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d05e      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800150c:	4a95      	ldr	r2, [pc, #596]	; (8001764 <HAL_GPIO_Init+0x294>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d875      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001512:	4a95      	ldr	r2, [pc, #596]	; (8001768 <HAL_GPIO_Init+0x298>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d058      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001518:	4a93      	ldr	r2, [pc, #588]	; (8001768 <HAL_GPIO_Init+0x298>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d86f      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800151e:	4a93      	ldr	r2, [pc, #588]	; (800176c <HAL_GPIO_Init+0x29c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d052      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001524:	4a91      	ldr	r2, [pc, #580]	; (800176c <HAL_GPIO_Init+0x29c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d869      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800152a:	4a91      	ldr	r2, [pc, #580]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04c      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001530:	4a8f      	ldr	r2, [pc, #572]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d863      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001536:	4a8f      	ldr	r2, [pc, #572]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d046      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800153c:	4a8d      	ldr	r2, [pc, #564]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d85d      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d82a      	bhi.n	800159c <HAL_GPIO_Init+0xcc>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d859      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <HAL_GPIO_Init+0x80>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080015b7 	.word	0x080015b7
 800155c:	080015f9 	.word	0x080015f9
 8001560:	080015ff 	.word	0x080015ff
 8001564:	080015ff 	.word	0x080015ff
 8001568:	080015ff 	.word	0x080015ff
 800156c:	080015ff 	.word	0x080015ff
 8001570:	080015ff 	.word	0x080015ff
 8001574:	080015ff 	.word	0x080015ff
 8001578:	080015ff 	.word	0x080015ff
 800157c:	080015ff 	.word	0x080015ff
 8001580:	080015ff 	.word	0x080015ff
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015ff 	.word	0x080015ff
 800158c:	080015ff 	.word	0x080015ff
 8001590:	080015ff 	.word	0x080015ff
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c1 	.word	0x080015c1
 800159c:	4a76      	ldr	r2, [pc, #472]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a2:	e02c      	b.n	80015fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e029      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	3304      	adds	r3, #4
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e024      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	3308      	adds	r3, #8
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e01f      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	330c      	adds	r3, #12
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e01a      	b.n	8001600 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d2:	2304      	movs	r3, #4
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e013      	b.n	8001600 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	611a      	str	r2, [r3, #16]
          break;
 80015ea:	e009      	b.n	8001600 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	615a      	str	r2, [r3, #20]
          break;
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x130>
          break;
 80015fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d801      	bhi.n	800160a <HAL_GPIO_Init+0x13a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e001      	b.n	800160e <HAL_GPIO_Init+0x13e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d802      	bhi.n	800161c <HAL_GPIO_Init+0x14c>
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x152>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3b08      	subs	r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	210f      	movs	r1, #15
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a9 	beq.w	80017a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001650:	4b4a      	ldr	r3, [pc, #296]	; (800177c <HAL_GPIO_Init+0x2ac>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a49      	ldr	r2, [pc, #292]	; (800177c <HAL_GPIO_Init+0x2ac>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_GPIO_Init+0x2ac>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001668:	4a45      	ldr	r2, [pc, #276]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3d      	ldr	r2, [pc, #244]	; (8001784 <HAL_GPIO_Init+0x2b4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d00d      	beq.n	80016b0 <HAL_GPIO_Init+0x1e0>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3c      	ldr	r2, [pc, #240]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d007      	beq.n	80016ac <HAL_GPIO_Init+0x1dc>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3b      	ldr	r2, [pc, #236]	; (800178c <HAL_GPIO_Init+0x2bc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_GPIO_Init+0x1d8>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e004      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016a8:	2303      	movs	r3, #3
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016b0:	2300      	movs	r3, #0
 80016b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b4:	f002 0203 	and.w	r2, r2, #3
 80016b8:	0092      	lsls	r2, r2, #2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c2:	492f      	ldr	r1, [pc, #188]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d006      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	492b      	ldr	r1, [pc, #172]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ea:	4b29      	ldr	r3, [pc, #164]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4927      	ldr	r1, [pc, #156]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4921      	ldr	r1, [pc, #132]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	60cb      	str	r3, [r1, #12]
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	43db      	mvns	r3, r3
 800171a:	491d      	ldr	r1, [pc, #116]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 800171c:	4013      	ands	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800172c:	4b18      	ldr	r3, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4917      	ldr	r1, [pc, #92]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	43db      	mvns	r3, r3
 8001742:	4913      	ldr	r1, [pc, #76]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001744:	4013      	ands	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01f      	beq.n	8001794 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	490d      	ldr	r1, [pc, #52]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e01f      	b.n	80017a2 <HAL_GPIO_Init+0x2d2>
 8001762:	bf00      	nop
 8001764:	10320000 	.word	0x10320000
 8001768:	10310000 	.word	0x10310000
 800176c:	10220000 	.word	0x10220000
 8001770:	10210000 	.word	0x10210000
 8001774:	10120000 	.word	0x10120000
 8001778:	10110000 	.word	0x10110000
 800177c:	40021000 	.word	0x40021000
 8001780:	40010000 	.word	0x40010000
 8001784:	40010800 	.word	0x40010800
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000
 8001790:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_GPIO_Init+0x2f4>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	43db      	mvns	r3, r3
 800179c:	4909      	ldr	r1, [pc, #36]	; (80017c4 <HAL_GPIO_Init+0x2f4>)
 800179e:	4013      	ands	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f ae96 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e001      	b.n	80017ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	460b      	mov	r3, r1
 8001800:	807b      	strh	r3, [r7, #2]
 8001802:	4613      	mov	r3, r2
 8001804:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001806:	787b      	ldrb	r3, [r7, #1]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001812:	e003      	b.n	800181c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001814:	887b      	ldrh	r3, [r7, #2]
 8001816:	041a      	lsls	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	611a      	str	r2, [r3, #16]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43d9      	mvns	r1, r3
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	400b      	ands	r3, r1
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e272      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001878:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b04      	cmp	r3, #4
 8001882:	d00c      	beq.n	800189e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001884:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d112      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
 8001890:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800189c:	d10b      	bne.n	80018b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d06c      	beq.n	8001984 <HAL_RCC_OscConfig+0x12c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d168      	bne.n	8001984 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e24c      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018be:	d106      	bne.n	80018ce <HAL_RCC_OscConfig+0x76>
 80018c0:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x98>
 80018d6:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b78      	ldr	r3, [pc, #480]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a77      	ldr	r2, [pc, #476]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e01d      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0xbc>
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a71      	ldr	r2, [pc, #452]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b6f      	ldr	r3, [pc, #444]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6e      	ldr	r2, [pc, #440]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e00b      	b.n	800192c <HAL_RCC_OscConfig+0xd4>
 8001914:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a6a      	ldr	r2, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a67      	ldr	r2, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800192a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d013      	beq.n	800195c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fcb4 	bl	80012a0 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fcb0 	bl	80012a0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e200      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0xe4>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fca0 	bl	80012a0 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fc9c 	bl	80012a0 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e1ec      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001976:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x10c>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d063      	beq.n	8001a5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800199e:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
 80019aa:	4b46      	ldr	r3, [pc, #280]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4939      	ldr	r1, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fc55 	bl	80012a0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff fc51 	bl	80012a0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1a1      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b2a      	ldr	r3, [pc, #168]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x270>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc34 	bl	80012a0 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc30 	bl	80012a0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e180      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03a      	beq.n	8001adc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d019      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff fc14 	bl	80012a0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc10 	bl	80012a0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e160      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 fa9c 	bl	8001fd8 <RCC_Delay>
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fbfa 	bl	80012a0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aae:	e00f      	b.n	8001ad0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fbf6 	bl	80012a0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d908      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e146      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	42420000 	.word	0x42420000
 8001acc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e9      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 80a6 	beq.w	8001c36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a87      	ldr	r2, [pc, #540]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b85      	ldr	r3, [pc, #532]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b16:	4b82      	ldr	r3, [pc, #520]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b22:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a7e      	ldr	r2, [pc, #504]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff fbb7 	bl	80012a0 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fbb3 	bl	80012a0 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e103      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_RCC_OscConfig+0x4c8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x312>
 8001b5c:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a6e      	ldr	r2, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	e02d      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x334>
 8001b72:	4b6a      	ldr	r3, [pc, #424]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a69      	ldr	r2, [pc, #420]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	e01c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d10c      	bne.n	8001bae <HAL_RCC_OscConfig+0x356>
 8001b94:	4b61      	ldr	r3, [pc, #388]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a5d      	ldr	r2, [pc, #372]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e00b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x36e>
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a5a      	ldr	r2, [pc, #360]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	6213      	str	r3, [r2, #32]
 8001bba:	4b58      	ldr	r3, [pc, #352]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	f023 0304 	bic.w	r3, r3, #4
 8001bc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d015      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fb67 	bl	80012a0 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fb63 	bl	80012a0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0b1      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x37e>
 8001bf8:	e014      	b.n	8001c24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fb51 	bl	80012a0 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7ff fb4d 	bl	80012a0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e09b      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c18:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ee      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d105      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a3b      	ldr	r2, [pc, #236]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c40:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b08      	cmp	r3, #8
 8001c4a:	d061      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d146      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff fb21 	bl	80012a0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff fb1d 	bl	80012a0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e06d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	4921      	ldr	r1, [pc, #132]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a19      	ldr	r1, [r3, #32]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	430b      	orrs	r3, r1
 8001cae:	491b      	ldr	r1, [pc, #108]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff faf1 	bl	80012a0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff faed 	bl	80012a0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e03d      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x46a>
 8001ce0:	e035      	b.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fada 	bl	80012a0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff fad6 	bl	80012a0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e026      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x498>
 8001d0e:	e01e      	b.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e019      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40007000 	.word	0x40007000
 8001d24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_OscConfig+0x500>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0d0      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b6a      	ldr	r3, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d910      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4965      	ldr	r1, [pc, #404]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b63      	ldr	r3, [pc, #396]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0b8      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001db8:	4b59      	ldr	r3, [pc, #356]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	494d      	ldr	r1, [pc, #308]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d040      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e07f      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e1a:	4b41      	ldr	r3, [pc, #260]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d109      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e073      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b3d      	ldr	r3, [pc, #244]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e06b      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 0203 	bic.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4936      	ldr	r1, [pc, #216]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fa28 	bl	80012a0 <HAL_GetTick>
 8001e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e54:	f7ff fa24 	bl	80012a0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e053      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 020c 	and.w	r2, r3, #12
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1eb      	bne.n	8001e54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d210      	bcs.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 0207 	bic.w	r2, r3, #7
 8001e92:	4922      	ldr	r1, [pc, #136]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e032      	b.n	8001f12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4916      	ldr	r1, [pc, #88]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	490e      	ldr	r1, [pc, #56]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eea:	f000 f821 	bl	8001f30 <HAL_RCC_GetSysClockFreq>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	5ccb      	ldrb	r3, [r1, r3]
 8001efe:	fa22 f303 	lsr.w	r3, r2, r3
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_RCC_ClockConfig+0x1cc>)
 8001f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_ClockConfig+0x1d0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f986 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	40021000 	.word	0x40021000
 8001f24:	0800283c 	.word	0x0800283c
 8001f28:	20000020 	.word	0x20000020
 8001f2c:	20000024 	.word	0x20000024

08001f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b087      	sub	sp, #28
 8001f34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x30>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x36>
 8001f5e:	e027      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b19      	ldr	r3, [pc, #100]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f62:	613b      	str	r3, [r7, #16]
      break;
 8001f64:	e027      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f70:	5cd3      	ldrb	r3, [r2, r3]
 8001f72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	0c5b      	lsrs	r3, r3, #17
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f92:	fb03 f202 	mul.w	r2, r3, r2
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e004      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	613b      	str	r3, [r7, #16]
      break;
 8001fae:	e002      	b.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fb2:	613b      	str	r3, [r7, #16]
      break;
 8001fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb6:	693b      	ldr	r3, [r7, #16]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	007a1200 	.word	0x007a1200
 8001fcc:	0800284c 	.word	0x0800284c
 8001fd0:	0800285c 	.word	0x0800285c
 8001fd4:	003d0900 	.word	0x003d0900

08001fd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <RCC_Delay+0x34>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <RCC_Delay+0x38>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	0a5b      	lsrs	r3, r3, #9
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff4:	bf00      	nop
  }
  while (Delay --);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1e5a      	subs	r2, r3, #1
 8001ffa:	60fa      	str	r2, [r7, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f9      	bne.n	8001ff4 <RCC_Delay+0x1c>
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000020 	.word	0x20000020
 8002010:	10624dd3 	.word	0x10624dd3

08002014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e041      	b.n	80020aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe ff9a 	bl	8000f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f000 fa56 	bl	8002504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d001      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e035      	b.n	8002138 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a16      	ldr	r2, [pc, #88]	; (8002144 <HAL_TIM_Base_Start_IT+0x90>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d009      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x4e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f6:	d004      	beq.n	8002102 <HAL_TIM_Base_Start_IT+0x4e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a12      	ldr	r2, [pc, #72]	; (8002148 <HAL_TIM_Base_Start_IT+0x94>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d111      	bne.n	8002126 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d010      	beq.n	8002136 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002124:	e007      	b.n	8002136 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40000400 	.word	0x40000400

0800214c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d020      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0202 	mvn.w	r2, #2
 8002180:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f998 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 800219c:	e005      	b.n	80021aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f98b 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f99a 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d020      	beq.n	80021fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01b      	beq.n	80021fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0204 	mvn.w	r2, #4
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f972 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f965 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f974 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d020      	beq.n	8002248 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01b      	beq.n	8002248 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0208 	mvn.w	r2, #8
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2204      	movs	r2, #4
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f94c 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f93f 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f94e 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	f003 0310 	and.w	r3, r3, #16
 800224e:	2b00      	cmp	r3, #0
 8002250:	d020      	beq.n	8002294 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01b      	beq.n	8002294 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0210 	mvn.w	r2, #16
 8002264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2208      	movs	r2, #8
 800226a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f926 	bl	80024cc <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f919 	bl	80024ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f928 	bl	80024de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0201 	mvn.w	r2, #1
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe fdb6 	bl	8000e24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa6f 	bl	80027ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8f8 	bl	80024f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00c      	beq.n	8002324 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0220 	mvn.w	r2, #32
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa42 	bl	80027a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d101      	bne.n	8002348 <HAL_TIM_ConfigClockSource+0x1c>
 8002344:	2302      	movs	r3, #2
 8002346:	e0b4      	b.n	80024b2 <HAL_TIM_ConfigClockSource+0x186>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002380:	d03e      	beq.n	8002400 <HAL_TIM_ConfigClockSource+0xd4>
 8002382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002386:	f200 8087 	bhi.w	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 800238a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800238e:	f000 8086 	beq.w	800249e <HAL_TIM_ConfigClockSource+0x172>
 8002392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002396:	d87f      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 8002398:	2b70      	cmp	r3, #112	; 0x70
 800239a:	d01a      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0xa6>
 800239c:	2b70      	cmp	r3, #112	; 0x70
 800239e:	d87b      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 80023a0:	2b60      	cmp	r3, #96	; 0x60
 80023a2:	d050      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x11a>
 80023a4:	2b60      	cmp	r3, #96	; 0x60
 80023a6:	d877      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 80023a8:	2b50      	cmp	r3, #80	; 0x50
 80023aa:	d03c      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0xfa>
 80023ac:	2b50      	cmp	r3, #80	; 0x50
 80023ae:	d873      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d058      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0x13a>
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d86f      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d064      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x15a>
 80023bc:	2b30      	cmp	r3, #48	; 0x30
 80023be:	d86b      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d060      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x15a>
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d867      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05c      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x15a>
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d05a      	beq.n	8002486 <HAL_TIM_ConfigClockSource+0x15a>
 80023d0:	e062      	b.n	8002498 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023e2:	f000 f96a 	bl	80026ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	609a      	str	r2, [r3, #8]
      break;
 80023fe:	e04f      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002410:	f000 f953 	bl	80026ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002422:	609a      	str	r2, [r3, #8]
      break;
 8002424:	e03c      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002432:	461a      	mov	r2, r3
 8002434:	f000 f8ca 	bl	80025cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2150      	movs	r1, #80	; 0x50
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f921 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002444:	e02c      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002452:	461a      	mov	r2, r3
 8002454:	f000 f8e8 	bl	8002628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2160      	movs	r1, #96	; 0x60
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f911 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002464:	e01c      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	461a      	mov	r2, r3
 8002474:	f000 f8aa 	bl	80025cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f901 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002484:	e00c      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f000 f8f8 	bl	8002686 <TIM_ITRx_SetConfig>
      break;
 8002496:	e003      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
      break;
 800249c:	e000      	b.n	80024a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800249e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a2b      	ldr	r2, [pc, #172]	; (80025c4 <TIM_Base_SetConfig+0xc0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d007      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002522:	d003      	beq.n	800252c <TIM_Base_SetConfig+0x28>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <TIM_Base_SetConfig+0xc4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d108      	bne.n	800253e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <TIM_Base_SetConfig+0xc0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d003      	beq.n	8002556 <TIM_Base_SetConfig+0x52>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <TIM_Base_SetConfig+0xc4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d108      	bne.n	8002568 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <TIM_Base_SetConfig+0xc0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f023 0201 	bic.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	611a      	str	r2, [r3, #16]
  }
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40000400 	.word	0x40000400

080025cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 0201 	bic.w	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f023 030a 	bic.w	r3, r3, #10
 8002608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	621a      	str	r2, [r3, #32]
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	f023 0210 	bic.w	r2, r3, #16
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	031b      	lsls	r3, r3, #12
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	621a      	str	r2, [r3, #32]
}
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800269c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f043 0307 	orr.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b087      	sub	sp, #28
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	021a      	lsls	r2, r3, #8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	431a      	orrs	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	609a      	str	r2, [r3, #8]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800270c:	2302      	movs	r3, #2
 800270e:	e041      	b.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275c:	d004      	beq.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a10      	ldr	r2, [pc, #64]	; (80027a4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d10c      	bne.n	8002782 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	4313      	orrs	r3, r2
 8002778:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400

080027a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b083      	sub	sp, #12
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <memset>:
 80027cc:	4603      	mov	r3, r0
 80027ce:	4402      	add	r2, r0
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d100      	bne.n	80027d6 <memset+0xa>
 80027d4:	4770      	bx	lr
 80027d6:	f803 1b01 	strb.w	r1, [r3], #1
 80027da:	e7f9      	b.n	80027d0 <memset+0x4>

080027dc <__libc_init_array>:
 80027dc:	b570      	push	{r4, r5, r6, lr}
 80027de:	2600      	movs	r6, #0
 80027e0:	4d0c      	ldr	r5, [pc, #48]	; (8002814 <__libc_init_array+0x38>)
 80027e2:	4c0d      	ldr	r4, [pc, #52]	; (8002818 <__libc_init_array+0x3c>)
 80027e4:	1b64      	subs	r4, r4, r5
 80027e6:	10a4      	asrs	r4, r4, #2
 80027e8:	42a6      	cmp	r6, r4
 80027ea:	d109      	bne.n	8002800 <__libc_init_array+0x24>
 80027ec:	f000 f81a 	bl	8002824 <_init>
 80027f0:	2600      	movs	r6, #0
 80027f2:	4d0a      	ldr	r5, [pc, #40]	; (800281c <__libc_init_array+0x40>)
 80027f4:	4c0a      	ldr	r4, [pc, #40]	; (8002820 <__libc_init_array+0x44>)
 80027f6:	1b64      	subs	r4, r4, r5
 80027f8:	10a4      	asrs	r4, r4, #2
 80027fa:	42a6      	cmp	r6, r4
 80027fc:	d105      	bne.n	800280a <__libc_init_array+0x2e>
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
 8002800:	f855 3b04 	ldr.w	r3, [r5], #4
 8002804:	4798      	blx	r3
 8002806:	3601      	adds	r6, #1
 8002808:	e7ee      	b.n	80027e8 <__libc_init_array+0xc>
 800280a:	f855 3b04 	ldr.w	r3, [r5], #4
 800280e:	4798      	blx	r3
 8002810:	3601      	adds	r6, #1
 8002812:	e7f2      	b.n	80027fa <__libc_init_array+0x1e>
 8002814:	08002860 	.word	0x08002860
 8002818:	08002860 	.word	0x08002860
 800281c:	08002860 	.word	0x08002860
 8002820:	08002864 	.word	0x08002864

08002824 <_init>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	bf00      	nop
 8002828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282a:	bc08      	pop	{r3}
 800282c:	469e      	mov	lr, r3
 800282e:	4770      	bx	lr

08002830 <_fini>:
 8002830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002832:	bf00      	nop
 8002834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002836:	bc08      	pop	{r3}
 8002838:	469e      	mov	lr, r3
 800283a:	4770      	bx	lr
