
Lab3_Buttons_Switches.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003124  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003254  08003254  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08003254  08003254  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003254  08003254  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  0800325c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000034  08003290  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003290  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089ea  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001de6  00000000  00000000  00028a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002a870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ef  00000000  00000000  0002b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001728f  00000000  00000000  0002baef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7e6  00000000  00000000  00042d7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008258d  00000000  00000000  00050564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028fc  00000000  00000000  000d2af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d53f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08003218 	.word	0x08003218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08003218 	.word	0x08003218

0800014c <isButtonPressed>:
/**
 * @brief	Check if the index button is pressed or not
 * @param	index : The index of the current button
 * @retval	1 if the button is pressed (flag = 1) or 0 if it is not (flag = 0)
 */
int isButtonPressed(int index) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[index] == 1) {
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000050 	.word	0x20000050

08000180 <isButtonLongPressed>:
/**
 * @brief	Check if the index button is pressed and hold (for more than 3s) or not
 * @param	index : The index of current button
 * @retval	1 if the button is pressed and hold (flag = 1) or 0 if it is not (flag = 0)
 */
int isButtonLongPressed(int index) {
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	if (button_long_flag[index] == 1) {
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <isButtonLongPressed+0x30>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000190:	2b01      	cmp	r3, #1
 8000192:	d106      	bne.n	80001a2 <isButtonLongPressed+0x22>
		button_long_flag[index] = 0;
 8000194:	4a06      	ldr	r2, [pc, #24]	; (80001b0 <isButtonLongPressed+0x30>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	2100      	movs	r1, #0
 800019a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800019e:	2301      	movs	r3, #1
 80001a0:	e000      	b.n	80001a4 <isButtonLongPressed+0x24>
	}
	return 0;
 80001a2:	2300      	movs	r3, #0
}
 80001a4:	4618      	mov	r0, r3
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2000005c 	.word	0x2000005c

080001b4 <getKeyInput>:
/**
 * @brief	Get the input from buttons and debounce processing
 * @param	None
 * @retval	None
 */
void getKeyInput(void) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++) {
 80001ba:	2300      	movs	r3, #0
 80001bc:	607b      	str	r3, [r7, #4]
 80001be:	e07c      	b.n	80002ba <getKeyInput+0x106>
		buffer0[i] = buffer1[i];
 80001c0:	4a42      	ldr	r2, [pc, #264]	; (80002cc <getKeyInput+0x118>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	4941      	ldr	r1, [pc, #260]	; (80002d0 <getKeyInput+0x11c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buffer1[i] = currState[i];
 80001d0:	4a40      	ldr	r2, [pc, #256]	; (80002d4 <getKeyInput+0x120>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d8:	493c      	ldr	r1, [pc, #240]	; (80002cc <getKeyInput+0x118>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		currState[i] = HAL_GPIO_ReadPin(BTN_GPIO[i], BTN_Pin[i]);
 80001e0:	4a3d      	ldr	r2, [pc, #244]	; (80002d8 <getKeyInput+0x124>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	493c      	ldr	r1, [pc, #240]	; (80002dc <getKeyInput+0x128>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001f0:	4619      	mov	r1, r3
 80001f2:	4610      	mov	r0, r2
 80001f4:	f001 ffe2 	bl	80021bc <HAL_GPIO_ReadPin>
 80001f8:	4603      	mov	r3, r0
 80001fa:	4619      	mov	r1, r3
 80001fc:	4a35      	ldr	r2, [pc, #212]	; (80002d4 <getKeyInput+0x120>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((buffer0[i] == buffer1[i]) && (buffer1[i] == currState[i])) {
 8000204:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <getKeyInput+0x11c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020c:	492f      	ldr	r1, [pc, #188]	; (80002cc <getKeyInput+0x118>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d14d      	bne.n	80002b4 <getKeyInput+0x100>
 8000218:	4a2c      	ldr	r2, [pc, #176]	; (80002cc <getKeyInput+0x118>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492c      	ldr	r1, [pc, #176]	; (80002d4 <getKeyInput+0x120>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000228:	429a      	cmp	r2, r3
 800022a:	d143      	bne.n	80002b4 <getKeyInput+0x100>
			if (prevState[i] != currState[i]) {
 800022c:	4a2c      	ldr	r2, [pc, #176]	; (80002e0 <getKeyInput+0x12c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000234:	4927      	ldr	r1, [pc, #156]	; (80002d4 <getKeyInput+0x120>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023c:	429a      	cmp	r2, r3
 800023e:	d019      	beq.n	8000274 <getKeyInput+0xc0>
				prevState[i] = currState[i];
 8000240:	4a24      	ldr	r2, [pc, #144]	; (80002d4 <getKeyInput+0x120>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	4925      	ldr	r1, [pc, #148]	; (80002e0 <getKeyInput+0x12c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				// PRESSED
				if (currState[i] == PRESSED_STATE) {
 8000250:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <getKeyInput+0x120>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d12b      	bne.n	80002b4 <getKeyInput+0x100>
					button_flag[i] = 1;
 800025c:	4a21      	ldr	r2, [pc, #132]	; (80002e4 <getKeyInput+0x130>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2101      	movs	r1, #1
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timeOutCounter[i] = TIME_OUT;
 8000266:	4a20      	ldr	r2, [pc, #128]	; (80002e8 <getKeyInput+0x134>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800026e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000272:	e01f      	b.n	80002b4 <getKeyInput+0x100>
				}
			}
			else {
				timeOutCounter[i]--;
 8000274:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <getKeyInput+0x134>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027c:	1e5a      	subs	r2, r3, #1
 800027e:	491a      	ldr	r1, [pc, #104]	; (80002e8 <getKeyInput+0x134>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (timeOutCounter[i] <= 0) {
 8000286:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <getKeyInput+0x134>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	2b00      	cmp	r3, #0
 8000290:	dc10      	bgt.n	80002b4 <getKeyInput+0x100>
					timeOutCounter[i] = TIME_OUT;
 8000292:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <getKeyInput+0x134>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					// PRESSSED AND HOLD
					if (prevState[i] == PRESSED_STATE) {
 800029e:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <getKeyInput+0x12c>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d104      	bne.n	80002b4 <getKeyInput+0x100>
						button_long_flag[i] = 1;
 80002aa:	4a10      	ldr	r2, [pc, #64]	; (80002ec <getKeyInput+0x138>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2101      	movs	r1, #1
 80002b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3301      	adds	r3, #1
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b02      	cmp	r3, #2
 80002be:	f77f af7f 	ble.w	80001c0 <getKeyInput+0xc>
					// prevState[i] = NORMAL_STATE;
				}
			}
		}
	}
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000074 	.word	0x20000074
 80002d0:	20000068 	.word	0x20000068
 80002d4:	20000080 	.word	0x20000080
 80002d8:	20000000 	.word	0x20000000
 80002dc:	2000000c 	.word	0x2000000c
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	20000050 	.word	0x20000050
 80002e8:	20000098 	.word	0x20000098
 80002ec:	2000005c 	.word	0x2000005c

080002f0 <FSM_Automatic_Run>:
/**
 * @brief	Run the FSM in automatic mode
 * @param	None
 * @retval	None
 */
void FSM_Automatic_Run(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	switch (status) {
 80002f4:	4bc7      	ldr	r3, [pc, #796]	; (8000614 <FSM_Automatic_Run+0x324>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3b01      	subs	r3, #1
 80002fa:	2b04      	cmp	r3, #4
 80002fc:	f200 82a9 	bhi.w	8000852 <FSM_Automatic_Run+0x562>
 8000300:	a201      	add	r2, pc, #4	; (adr r2, 8000308 <FSM_Automatic_Run+0x18>)
 8000302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000306:	bf00      	nop
 8000308:	0800031d 	.word	0x0800031d
 800030c:	080003eb 	.word	0x080003eb
 8000310:	080004d9 	.word	0x080004d9
 8000314:	0800062d 	.word	0x0800062d
 8000318:	0800071b 	.word	0x0800071b
	case INIT_AUTO:
		setAllRedLED(OFF);
 800031c:	2000      	movs	r0, #0
 800031e:	f001 fbc3 	bl	8001aa8 <setAllRedLED>
		setAllYellowLED(OFF);
 8000322:	2000      	movs	r0, #0
 8000324:	f001 fbe8 	bl	8001af8 <setAllYellowLED>
		setAllGreenLED(OFF);
 8000328:	2000      	movs	r0, #0
 800032a:	f001 fc0d 	bl	8001b48 <setAllGreenLED>

		status = RED_GREEN;
 800032e:	4bb9      	ldr	r3, [pc, #740]	; (8000614 <FSM_Automatic_Run+0x324>)
 8000330:	2202      	movs	r2, #2
 8000332:	601a      	str	r2, [r3, #0]
		setTimer(0, 5000);
 8000334:	f241 3188 	movw	r1, #5000	; 0x1388
 8000338:	2000      	movs	r0, #0
 800033a:	f001 fa7f 	bl	800183c <setTimer>
		setTimer(1, 1000 * redDuration);
 800033e:	4bb6      	ldr	r3, [pc, #728]	; (8000618 <FSM_Automatic_Run+0x328>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000346:	fb02 f303 	mul.w	r3, r2, r3
 800034a:	4619      	mov	r1, r3
 800034c:	2001      	movs	r0, #1
 800034e:	f001 fa75 	bl	800183c <setTimer>
		setTimer(2, 1000 * greenDuration);
 8000352:	4bb2      	ldr	r3, [pc, #712]	; (800061c <FSM_Automatic_Run+0x32c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800035a:	fb02 f303 	mul.w	r3, r2, r3
 800035e:	4619      	mov	r1, r3
 8000360:	2002      	movs	r0, #2
 8000362:	f001 fa6b 	bl	800183c <setTimer>

		button_flag[0] = 0;
 8000366:	4bae      	ldr	r3, [pc, #696]	; (8000620 <FSM_Automatic_Run+0x330>)
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
		button_flag[1] = 0;
 800036c:	4bac      	ldr	r3, [pc, #688]	; (8000620 <FSM_Automatic_Run+0x330>)
 800036e:	2200      	movs	r2, #0
 8000370:	605a      	str	r2, [r3, #4]
		button_flag[2] = 0;
 8000372:	4bab      	ldr	r3, [pc, #684]	; (8000620 <FSM_Automatic_Run+0x330>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]

		updateLedBuffer(0, (redDuration) / 10);
 8000378:	4ba7      	ldr	r3, [pc, #668]	; (8000618 <FSM_Automatic_Run+0x328>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4aa9      	ldr	r2, [pc, #676]	; (8000624 <FSM_Automatic_Run+0x334>)
 800037e:	fb82 1203 	smull	r1, r2, r2, r3
 8000382:	1092      	asrs	r2, r2, #2
 8000384:	17db      	asrs	r3, r3, #31
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	4619      	mov	r1, r3
 800038a:	2000      	movs	r0, #0
 800038c:	f001 f906 	bl	800159c <updateLedBuffer>
		updateLedBuffer(1, (redDuration) % 10);
 8000390:	4ba1      	ldr	r3, [pc, #644]	; (8000618 <FSM_Automatic_Run+0x328>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4ba3      	ldr	r3, [pc, #652]	; (8000624 <FSM_Automatic_Run+0x334>)
 8000396:	fb83 1302 	smull	r1, r3, r3, r2
 800039a:	1099      	asrs	r1, r3, #2
 800039c:	17d3      	asrs	r3, r2, #31
 800039e:	1ac9      	subs	r1, r1, r3
 80003a0:	460b      	mov	r3, r1
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	440b      	add	r3, r1
 80003a6:	005b      	lsls	r3, r3, #1
 80003a8:	1ad1      	subs	r1, r2, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	f001 f8f6 	bl	800159c <updateLedBuffer>
		updateLedBuffer(2, (greenDuration) / 10);
 80003b0:	4b9a      	ldr	r3, [pc, #616]	; (800061c <FSM_Automatic_Run+0x32c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a9b      	ldr	r2, [pc, #620]	; (8000624 <FSM_Automatic_Run+0x334>)
 80003b6:	fb82 1203 	smull	r1, r2, r2, r3
 80003ba:	1092      	asrs	r2, r2, #2
 80003bc:	17db      	asrs	r3, r3, #31
 80003be:	1ad3      	subs	r3, r2, r3
 80003c0:	4619      	mov	r1, r3
 80003c2:	2002      	movs	r0, #2
 80003c4:	f001 f8ea 	bl	800159c <updateLedBuffer>
		updateLedBuffer(3, (greenDuration) % 10);
 80003c8:	4b94      	ldr	r3, [pc, #592]	; (800061c <FSM_Automatic_Run+0x32c>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b95      	ldr	r3, [pc, #596]	; (8000624 <FSM_Automatic_Run+0x334>)
 80003ce:	fb83 1302 	smull	r1, r3, r3, r2
 80003d2:	1099      	asrs	r1, r3, #2
 80003d4:	17d3      	asrs	r3, r2, #31
 80003d6:	1ac9      	subs	r1, r1, r3
 80003d8:	460b      	mov	r3, r1
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	440b      	add	r3, r1
 80003de:	005b      	lsls	r3, r3, #1
 80003e0:	1ad1      	subs	r1, r2, r3
 80003e2:	2003      	movs	r0, #3
 80003e4:	f001 f8da 	bl	800159c <updateLedBuffer>
		break;
 80003e8:	e23c      	b.n	8000864 <FSM_Automatic_Run+0x574>

	case RED_GREEN:
		setLightWay1(RESET, SET, SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2101      	movs	r1, #1
 80003ee:	2000      	movs	r0, #0
 80003f0:	f001 fb16 	bl	8001a20 <setLightWay1>
		setLightWay2(SET, SET, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	2001      	movs	r0, #1
 80003fa:	f001 fb33 	bl	8001a64 <setLightWay2>

		if (isTimerExpired(2) == 1) {
 80003fe:	2002      	movs	r0, #2
 8000400:	f001 fa3c 	bl	800187c <isTimerExpired>
 8000404:	4603      	mov	r3, r0
 8000406:	2b01      	cmp	r3, #1
 8000408:	d128      	bne.n	800045c <FSM_Automatic_Run+0x16c>
			status = RED_YELLOW;
 800040a:	4b82      	ldr	r3, [pc, #520]	; (8000614 <FSM_Automatic_Run+0x324>)
 800040c:	2203      	movs	r2, #3
 800040e:	601a      	str	r2, [r3, #0]
			setTimer(2, 1000 * yellowDuration);
 8000410:	4b85      	ldr	r3, [pc, #532]	; (8000628 <FSM_Automatic_Run+0x338>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000418:	fb02 f303 	mul.w	r3, r2, r3
 800041c:	4619      	mov	r1, r3
 800041e:	2002      	movs	r0, #2
 8000420:	f001 fa0c 	bl	800183c <setTimer>

			updateLedBuffer(2, (yellowDuration) / 10);
 8000424:	4b80      	ldr	r3, [pc, #512]	; (8000628 <FSM_Automatic_Run+0x338>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a7e      	ldr	r2, [pc, #504]	; (8000624 <FSM_Automatic_Run+0x334>)
 800042a:	fb82 1203 	smull	r1, r2, r2, r3
 800042e:	1092      	asrs	r2, r2, #2
 8000430:	17db      	asrs	r3, r3, #31
 8000432:	1ad3      	subs	r3, r2, r3
 8000434:	4619      	mov	r1, r3
 8000436:	2002      	movs	r0, #2
 8000438:	f001 f8b0 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, (yellowDuration) % 10);
 800043c:	4b7a      	ldr	r3, [pc, #488]	; (8000628 <FSM_Automatic_Run+0x338>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b78      	ldr	r3, [pc, #480]	; (8000624 <FSM_Automatic_Run+0x334>)
 8000442:	fb83 1302 	smull	r1, r3, r3, r2
 8000446:	1099      	asrs	r1, r3, #2
 8000448:	17d3      	asrs	r3, r2, #31
 800044a:	1ac9      	subs	r1, r1, r3
 800044c:	460b      	mov	r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	440b      	add	r3, r1
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	1ad1      	subs	r1, r2, r3
 8000456:	2003      	movs	r0, #3
 8000458:	f001 f8a0 	bl	800159c <updateLedBuffer>
		}

		// Press button 1 to access CONFIG MODE
		if (isButtonPressed(0) == 1) {
 800045c:	2000      	movs	r0, #0
 800045e:	f7ff fe75 	bl	800014c <isButtonPressed>
 8000462:	4603      	mov	r3, r0
 8000464:	2b01      	cmp	r3, #1
 8000466:	d117      	bne.n	8000498 <FSM_Automatic_Run+0x1a8>
			status = INIT_CONFIG;
 8000468:	4b6a      	ldr	r3, [pc, #424]	; (8000614 <FSM_Automatic_Run+0x324>)
 800046a:	220d      	movs	r2, #13
 800046c:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 800046e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000472:	2003      	movs	r0, #3
 8000474:	f001 f9e2 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 8000478:	2100      	movs	r1, #0
 800047a:	2000      	movs	r0, #0
 800047c:	f001 f88e 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 1);
 8000480:	2101      	movs	r1, #1
 8000482:	2001      	movs	r0, #1
 8000484:	f001 f88a 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000488:	2100      	movs	r1, #0
 800048a:	2002      	movs	r0, #2
 800048c:	f001 f886 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 1);
 8000490:	2101      	movs	r1, #1
 8000492:	2003      	movs	r0, #3
 8000494:	f001 f882 	bl	800159c <updateLedBuffer>
		}

		// Press button 3 to access MANUAL MODE
		if (isButtonPressed(2) == 1) {
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff fe57 	bl	800014c <isButtonPressed>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	f040 81d8 	bne.w	8000856 <FSM_Automatic_Run+0x566>
			status = INIT_MAN;
 80004a6:	4b5b      	ldr	r3, [pc, #364]	; (8000614 <FSM_Automatic_Run+0x324>)
 80004a8:	2209      	movs	r2, #9
 80004aa:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 80004ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004b0:	2003      	movs	r0, #3
 80004b2:	f001 f9c3 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f001 f86f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 0);
 80004be:	2100      	movs	r1, #0
 80004c0:	2001      	movs	r0, #1
 80004c2:	f001 f86b 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 80004c6:	2100      	movs	r1, #0
 80004c8:	2002      	movs	r0, #2
 80004ca:	f001 f867 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 0);
 80004ce:	2100      	movs	r1, #0
 80004d0:	2003      	movs	r0, #3
 80004d2:	f001 f863 	bl	800159c <updateLedBuffer>
		}
		break;
 80004d6:	e1be      	b.n	8000856 <FSM_Automatic_Run+0x566>

	case RED_YELLOW:
		setLightWay1(RESET, SET, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2101      	movs	r1, #1
 80004dc:	2000      	movs	r0, #0
 80004de:	f001 fa9f 	bl	8001a20 <setLightWay1>
		setLightWay2(SET, RESET, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2100      	movs	r1, #0
 80004e6:	2001      	movs	r0, #1
 80004e8:	f001 fabc 	bl	8001a64 <setLightWay2>

		if (isTimerExpired(2) == 1) {
 80004ec:	2002      	movs	r0, #2
 80004ee:	f001 f9c5 	bl	800187c <isTimerExpired>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d14e      	bne.n	8000596 <FSM_Automatic_Run+0x2a6>
			status = GREEN_RED;
 80004f8:	4b46      	ldr	r3, [pc, #280]	; (8000614 <FSM_Automatic_Run+0x324>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000 * greenDuration);
 80004fe:	4b47      	ldr	r3, [pc, #284]	; (800061c <FSM_Automatic_Run+0x32c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	4619      	mov	r1, r3
 800050c:	2001      	movs	r0, #1
 800050e:	f001 f995 	bl	800183c <setTimer>
			setTimer(2, 1000 * redDuration);
 8000512:	4b41      	ldr	r3, [pc, #260]	; (8000618 <FSM_Automatic_Run+0x328>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	4619      	mov	r1, r3
 8000520:	2002      	movs	r0, #2
 8000522:	f001 f98b 	bl	800183c <setTimer>

			updateLedBuffer(0, (greenDuration) / 10);
 8000526:	4b3d      	ldr	r3, [pc, #244]	; (800061c <FSM_Automatic_Run+0x32c>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a3e      	ldr	r2, [pc, #248]	; (8000624 <FSM_Automatic_Run+0x334>)
 800052c:	fb82 1203 	smull	r1, r2, r2, r3
 8000530:	1092      	asrs	r2, r2, #2
 8000532:	17db      	asrs	r3, r3, #31
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	4619      	mov	r1, r3
 8000538:	2000      	movs	r0, #0
 800053a:	f001 f82f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, (greenDuration) % 10);
 800053e:	4b37      	ldr	r3, [pc, #220]	; (800061c <FSM_Automatic_Run+0x32c>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b38      	ldr	r3, [pc, #224]	; (8000624 <FSM_Automatic_Run+0x334>)
 8000544:	fb83 1302 	smull	r1, r3, r3, r2
 8000548:	1099      	asrs	r1, r3, #2
 800054a:	17d3      	asrs	r3, r2, #31
 800054c:	1ac9      	subs	r1, r1, r3
 800054e:	460b      	mov	r3, r1
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	440b      	add	r3, r1
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	1ad1      	subs	r1, r2, r3
 8000558:	2001      	movs	r0, #1
 800055a:	f001 f81f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, (redDuration) / 10);
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <FSM_Automatic_Run+0x328>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a30      	ldr	r2, [pc, #192]	; (8000624 <FSM_Automatic_Run+0x334>)
 8000564:	fb82 1203 	smull	r1, r2, r2, r3
 8000568:	1092      	asrs	r2, r2, #2
 800056a:	17db      	asrs	r3, r3, #31
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	4619      	mov	r1, r3
 8000570:	2002      	movs	r0, #2
 8000572:	f001 f813 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, (redDuration) % 10);
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <FSM_Automatic_Run+0x328>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <FSM_Automatic_Run+0x334>)
 800057c:	fb83 1302 	smull	r1, r3, r3, r2
 8000580:	1099      	asrs	r1, r3, #2
 8000582:	17d3      	asrs	r3, r2, #31
 8000584:	1ac9      	subs	r1, r1, r3
 8000586:	460b      	mov	r3, r1
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	440b      	add	r3, r1
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	1ad1      	subs	r1, r2, r3
 8000590:	2003      	movs	r0, #3
 8000592:	f001 f803 	bl	800159c <updateLedBuffer>
		}

		// Press button 1 to access CONFIG MODE
		if (isButtonPressed(0) == 1) {
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff fdd8 	bl	800014c <isButtonPressed>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d117      	bne.n	80005d2 <FSM_Automatic_Run+0x2e2>
			status = INIT_CONFIG;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <FSM_Automatic_Run+0x324>)
 80005a4:	220d      	movs	r2, #13
 80005a6:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 80005a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ac:	2003      	movs	r0, #3
 80005ae:	f001 f945 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 80005b2:	2100      	movs	r1, #0
 80005b4:	2000      	movs	r0, #0
 80005b6:	f000 fff1 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 1);
 80005ba:	2101      	movs	r1, #1
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 ffed 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 80005c2:	2100      	movs	r1, #0
 80005c4:	2002      	movs	r0, #2
 80005c6:	f000 ffe9 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 1);
 80005ca:	2101      	movs	r1, #1
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 ffe5 	bl	800159c <updateLedBuffer>
		}

		// Press button 3 to access MANUAL MODE
		if (isButtonPressed(2) == 1) {
 80005d2:	2002      	movs	r0, #2
 80005d4:	f7ff fdba 	bl	800014c <isButtonPressed>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	f040 813d 	bne.w	800085a <FSM_Automatic_Run+0x56a>
			status = INIT_MAN;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <FSM_Automatic_Run+0x324>)
 80005e2:	2209      	movs	r2, #9
 80005e4:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 80005e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005ea:	2003      	movs	r0, #3
 80005ec:	f001 f926 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 80005f0:	2100      	movs	r1, #0
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 ffd2 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	f000 ffce 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000600:	2100      	movs	r1, #0
 8000602:	2002      	movs	r0, #2
 8000604:	f000 ffca 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 0);
 8000608:	2100      	movs	r1, #0
 800060a:	2003      	movs	r0, #3
 800060c:	f000 ffc6 	bl	800159c <updateLedBuffer>
		}
		break;
 8000610:	e123      	b.n	800085a <FSM_Automatic_Run+0x56a>
 8000612:	bf00      	nop
 8000614:	200000b0 	.word	0x200000b0
 8000618:	2000001c 	.word	0x2000001c
 800061c:	20000024 	.word	0x20000024
 8000620:	20000050 	.word	0x20000050
 8000624:	66666667 	.word	0x66666667
 8000628:	20000020 	.word	0x20000020

	case GREEN_RED:
		setLightWay1(SET, SET, RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	2001      	movs	r0, #1
 8000632:	f001 f9f5 	bl	8001a20 <setLightWay1>
		setLightWay2(RESET, SET, SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	2000      	movs	r0, #0
 800063c:	f001 fa12 	bl	8001a64 <setLightWay2>

		if (isTimerExpired(1) == 1) {
 8000640:	2001      	movs	r0, #1
 8000642:	f001 f91b 	bl	800187c <isTimerExpired>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d128      	bne.n	800069e <FSM_Automatic_Run+0x3ae>
			status = YELLOW_RED;
 800064c:	4baa      	ldr	r3, [pc, #680]	; (80008f8 <FSM_Automatic_Run+0x608>)
 800064e:	2205      	movs	r2, #5
 8000650:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000 * yellowDuration);
 8000652:	4baa      	ldr	r3, [pc, #680]	; (80008fc <FSM_Automatic_Run+0x60c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	4619      	mov	r1, r3
 8000660:	2001      	movs	r0, #1
 8000662:	f001 f8eb 	bl	800183c <setTimer>

			updateLedBuffer(0, (yellowDuration) / 10);
 8000666:	4ba5      	ldr	r3, [pc, #660]	; (80008fc <FSM_Automatic_Run+0x60c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4aa5      	ldr	r2, [pc, #660]	; (8000900 <FSM_Automatic_Run+0x610>)
 800066c:	fb82 1203 	smull	r1, r2, r2, r3
 8000670:	1092      	asrs	r2, r2, #2
 8000672:	17db      	asrs	r3, r3, #31
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	4619      	mov	r1, r3
 8000678:	2000      	movs	r0, #0
 800067a:	f000 ff8f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, (yellowDuration) % 10);
 800067e:	4b9f      	ldr	r3, [pc, #636]	; (80008fc <FSM_Automatic_Run+0x60c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4b9f      	ldr	r3, [pc, #636]	; (8000900 <FSM_Automatic_Run+0x610>)
 8000684:	fb83 1302 	smull	r1, r3, r3, r2
 8000688:	1099      	asrs	r1, r3, #2
 800068a:	17d3      	asrs	r3, r2, #31
 800068c:	1ac9      	subs	r1, r1, r3
 800068e:	460b      	mov	r3, r1
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	440b      	add	r3, r1
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	1ad1      	subs	r1, r2, r3
 8000698:	2001      	movs	r0, #1
 800069a:	f000 ff7f 	bl	800159c <updateLedBuffer>
		}

		// Press button 1 to access CONFIG MODE
		if (isButtonPressed(0) == 1) {
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fd54 	bl	800014c <isButtonPressed>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d117      	bne.n	80006da <FSM_Automatic_Run+0x3ea>
			status = INIT_CONFIG;
 80006aa:	4b93      	ldr	r3, [pc, #588]	; (80008f8 <FSM_Automatic_Run+0x608>)
 80006ac:	220d      	movs	r2, #13
 80006ae:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 80006b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006b4:	2003      	movs	r0, #3
 80006b6:	f001 f8c1 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 80006ba:	2100      	movs	r1, #0
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 ff6d 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 1);
 80006c2:	2101      	movs	r1, #1
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 ff69 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 80006ca:	2100      	movs	r1, #0
 80006cc:	2002      	movs	r0, #2
 80006ce:	f000 ff65 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 1);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2003      	movs	r0, #3
 80006d6:	f000 ff61 	bl	800159c <updateLedBuffer>
		}

		// Press button 3 to access MANUAL MODE
		if (isButtonPressed(2) == 1) {
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff fd36 	bl	800014c <isButtonPressed>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	f040 80bb 	bne.w	800085e <FSM_Automatic_Run+0x56e>
			status = INIT_MAN;
 80006e8:	4b83      	ldr	r3, [pc, #524]	; (80008f8 <FSM_Automatic_Run+0x608>)
 80006ea:	2209      	movs	r2, #9
 80006ec:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 80006ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006f2:	2003      	movs	r0, #3
 80006f4:	f001 f8a2 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 80006f8:	2100      	movs	r1, #0
 80006fa:	2000      	movs	r0, #0
 80006fc:	f000 ff4e 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 0);
 8000700:	2100      	movs	r1, #0
 8000702:	2001      	movs	r0, #1
 8000704:	f000 ff4a 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000708:	2100      	movs	r1, #0
 800070a:	2002      	movs	r0, #2
 800070c:	f000 ff46 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 0);
 8000710:	2100      	movs	r1, #0
 8000712:	2003      	movs	r0, #3
 8000714:	f000 ff42 	bl	800159c <updateLedBuffer>
		}
		break;
 8000718:	e0a1      	b.n	800085e <FSM_Automatic_Run+0x56e>

	case YELLOW_RED:
		setLightWay1(SET, RESET, SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2100      	movs	r1, #0
 800071e:	2001      	movs	r0, #1
 8000720:	f001 f97e 	bl	8001a20 <setLightWay1>
		setLightWay2(RESET, SET, SET);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	2000      	movs	r0, #0
 800072a:	f001 f99b 	bl	8001a64 <setLightWay2>

		if (isTimerExpired(1) == 1) {
 800072e:	2001      	movs	r0, #1
 8000730:	f001 f8a4 	bl	800187c <isTimerExpired>
 8000734:	4603      	mov	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d14e      	bne.n	80007d8 <FSM_Automatic_Run+0x4e8>
			status = RED_GREEN;
 800073a:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <FSM_Automatic_Run+0x608>)
 800073c:	2202      	movs	r2, #2
 800073e:	601a      	str	r2, [r3, #0]
			setTimer(1, 1000 * redDuration);
 8000740:	4b70      	ldr	r3, [pc, #448]	; (8000904 <FSM_Automatic_Run+0x614>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000748:	fb02 f303 	mul.w	r3, r2, r3
 800074c:	4619      	mov	r1, r3
 800074e:	2001      	movs	r0, #1
 8000750:	f001 f874 	bl	800183c <setTimer>
			setTimer(2, 1000 * greenDuration);
 8000754:	4b6c      	ldr	r3, [pc, #432]	; (8000908 <FSM_Automatic_Run+0x618>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800075c:	fb02 f303 	mul.w	r3, r2, r3
 8000760:	4619      	mov	r1, r3
 8000762:	2002      	movs	r0, #2
 8000764:	f001 f86a 	bl	800183c <setTimer>

			updateLedBuffer(0, (redDuration) / 10);
 8000768:	4b66      	ldr	r3, [pc, #408]	; (8000904 <FSM_Automatic_Run+0x614>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a64      	ldr	r2, [pc, #400]	; (8000900 <FSM_Automatic_Run+0x610>)
 800076e:	fb82 1203 	smull	r1, r2, r2, r3
 8000772:	1092      	asrs	r2, r2, #2
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	4619      	mov	r1, r3
 800077a:	2000      	movs	r0, #0
 800077c:	f000 ff0e 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, (redDuration) % 10);
 8000780:	4b60      	ldr	r3, [pc, #384]	; (8000904 <FSM_Automatic_Run+0x614>)
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b5e      	ldr	r3, [pc, #376]	; (8000900 <FSM_Automatic_Run+0x610>)
 8000786:	fb83 1302 	smull	r1, r3, r3, r2
 800078a:	1099      	asrs	r1, r3, #2
 800078c:	17d3      	asrs	r3, r2, #31
 800078e:	1ac9      	subs	r1, r1, r3
 8000790:	460b      	mov	r3, r1
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	440b      	add	r3, r1
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	1ad1      	subs	r1, r2, r3
 800079a:	2001      	movs	r0, #1
 800079c:	f000 fefe 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, (greenDuration) / 10);
 80007a0:	4b59      	ldr	r3, [pc, #356]	; (8000908 <FSM_Automatic_Run+0x618>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a56      	ldr	r2, [pc, #344]	; (8000900 <FSM_Automatic_Run+0x610>)
 80007a6:	fb82 1203 	smull	r1, r2, r2, r3
 80007aa:	1092      	asrs	r2, r2, #2
 80007ac:	17db      	asrs	r3, r3, #31
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2002      	movs	r0, #2
 80007b4:	f000 fef2 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, (greenDuration) % 10);
 80007b8:	4b53      	ldr	r3, [pc, #332]	; (8000908 <FSM_Automatic_Run+0x618>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b50      	ldr	r3, [pc, #320]	; (8000900 <FSM_Automatic_Run+0x610>)
 80007be:	fb83 1302 	smull	r1, r3, r3, r2
 80007c2:	1099      	asrs	r1, r3, #2
 80007c4:	17d3      	asrs	r3, r2, #31
 80007c6:	1ac9      	subs	r1, r1, r3
 80007c8:	460b      	mov	r3, r1
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	1ad1      	subs	r1, r2, r3
 80007d2:	2003      	movs	r0, #3
 80007d4:	f000 fee2 	bl	800159c <updateLedBuffer>
		}

		// Press button 1 to access CONFIG MODE
		if (isButtonPressed(0) == 1) {
 80007d8:	2000      	movs	r0, #0
 80007da:	f7ff fcb7 	bl	800014c <isButtonPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d117      	bne.n	8000814 <FSM_Automatic_Run+0x524>
			status = INIT_CONFIG;
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <FSM_Automatic_Run+0x608>)
 80007e6:	220d      	movs	r2, #13
 80007e8:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 80007ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007ee:	2003      	movs	r0, #3
 80007f0:	f001 f824 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2000      	movs	r0, #0
 80007f8:	f000 fed0 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 1);
 80007fc:	2101      	movs	r1, #1
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fecc 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000804:	2100      	movs	r1, #0
 8000806:	2002      	movs	r0, #2
 8000808:	f000 fec8 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 1);
 800080c:	2101      	movs	r1, #1
 800080e:	2003      	movs	r0, #3
 8000810:	f000 fec4 	bl	800159c <updateLedBuffer>
		}

		// Press button 3 to access MANUAL MODE
		if (isButtonPressed(2) == 1) {
 8000814:	2002      	movs	r0, #2
 8000816:	f7ff fc99 	bl	800014c <isButtonPressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d120      	bne.n	8000862 <FSM_Automatic_Run+0x572>
			status = INIT_MAN;
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <FSM_Automatic_Run+0x608>)
 8000822:	2209      	movs	r2, #9
 8000824:	601a      	str	r2, [r3, #0]

			setTimer(3, 500);
 8000826:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800082a:	2003      	movs	r0, #3
 800082c:	f001 f806 	bl	800183c <setTimer>
			updateLedBuffer(0, 0);
 8000830:	2100      	movs	r1, #0
 8000832:	2000      	movs	r0, #0
 8000834:	f000 feb2 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, 0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f000 feae 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	2002      	movs	r0, #2
 8000844:	f000 feaa 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2003      	movs	r0, #3
 800084c:	f000 fea6 	bl	800159c <updateLedBuffer>
		}
		break;
 8000850:	e007      	b.n	8000862 <FSM_Automatic_Run+0x572>

	default:
		break;
 8000852:	bf00      	nop
 8000854:	e006      	b.n	8000864 <FSM_Automatic_Run+0x574>
		break;
 8000856:	bf00      	nop
 8000858:	e004      	b.n	8000864 <FSM_Automatic_Run+0x574>
		break;
 800085a:	bf00      	nop
 800085c:	e002      	b.n	8000864 <FSM_Automatic_Run+0x574>
		break;
 800085e:	bf00      	nop
 8000860:	e000      	b.n	8000864 <FSM_Automatic_Run+0x574>
		break;
 8000862:	bf00      	nop
	}

	if ((status == 2) || (status == 3) || (status == 4) || (status == 5)) {
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <FSM_Automatic_Run+0x608>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b02      	cmp	r3, #2
 800086a:	d00b      	beq.n	8000884 <FSM_Automatic_Run+0x594>
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <FSM_Automatic_Run+0x608>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d007      	beq.n	8000884 <FSM_Automatic_Run+0x594>
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <FSM_Automatic_Run+0x608>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d003      	beq.n	8000884 <FSM_Automatic_Run+0x594>
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <FSM_Automatic_Run+0x608>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b05      	cmp	r3, #5
 8000882:	d136      	bne.n	80008f2 <FSM_Automatic_Run+0x602>
		// Scan 4 7-segment LEDs with the frequency of 0.5Hz
		if (isTimerExpired(3) == 1) {
 8000884:	2003      	movs	r0, #3
 8000886:	f000 fff9 	bl	800187c <isTimerExpired>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d117      	bne.n	80008c0 <FSM_Automatic_Run+0x5d0>
			update7SEG(index_led++);
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <FSM_Automatic_Run+0x61c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	491d      	ldr	r1, [pc, #116]	; (800090c <FSM_Automatic_Run+0x61c>)
 8000898:	600a      	str	r2, [r1, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fde8 	bl	8001470 <update7SEG>
			index_led = index_led % 4;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <FSM_Automatic_Run+0x61c>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	425a      	negs	r2, r3
 80008a6:	f003 0303 	and.w	r3, r3, #3
 80008aa:	f002 0203 	and.w	r2, r2, #3
 80008ae:	bf58      	it	pl
 80008b0:	4253      	negpl	r3, r2
 80008b2:	4a16      	ldr	r2, [pc, #88]	; (800090c <FSM_Automatic_Run+0x61c>)
 80008b4:	6013      	str	r3, [r2, #0]
			setTimer(3, 500);
 80008b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 ffbe 	bl	800183c <setTimer>
		}

		// Count down the duration for displaying on 7-segment LEDs
		if (isTimerExpired(4) == 1) {
 80008c0:	2004      	movs	r0, #4
 80008c2:	f000 ffdb 	bl	800187c <isTimerExpired>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d112      	bne.n	80008f2 <FSM_Automatic_Run+0x602>
			updateLedBuffer(1, led_buffer[1] - 1);
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <FSM_Automatic_Run+0x620>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fe61 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, led_buffer[3] - 1);
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <FSM_Automatic_Run+0x620>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4619      	mov	r1, r3
 80008e2:	2003      	movs	r0, #3
 80008e4:	f000 fe5a 	bl	800159c <updateLedBuffer>
			setTimer(4, 1000);
 80008e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ec:	2004      	movs	r0, #4
 80008ee:	f000 ffa5 	bl	800183c <setTimer>
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000b0 	.word	0x200000b0
 80008fc:	20000020 	.word	0x20000020
 8000900:	66666667 	.word	0x66666667
 8000904:	2000001c 	.word	0x2000001c
 8000908:	20000024 	.word	0x20000024
 800090c:	200000b4 	.word	0x200000b4
 8000910:	200000b8 	.word	0x200000b8

08000914 <FSM_Config_Run>:
/**
 * @brief	Run the FSM in configuration mode
 * @param	None
 * @retval	None
 */
void FSM_Config_Run(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	switch (status) {
 8000918:	4b81      	ldr	r3, [pc, #516]	; (8000b20 <FSM_Config_Run+0x20c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3b0a      	subs	r3, #10
 800091e:	2b03      	cmp	r3, #3
 8000920:	f200 8240 	bhi.w	8000da4 <FSM_Config_Run+0x490>
 8000924:	a201      	add	r2, pc, #4	; (adr r2, 800092c <FSM_Config_Run+0x18>)
 8000926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092a:	bf00      	nop
 800092c:	080009c5 	.word	0x080009c5
 8000930:	08000b41 	.word	0x08000b41
 8000934:	08000c9b 	.word	0x08000c9b
 8000938:	0800093d 	.word	0x0800093d
	case INIT_CONFIG:
		inc_RedDuration = 0;
 800093c:	4b79      	ldr	r3, [pc, #484]	; (8000b24 <FSM_Config_Run+0x210>)
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
		inc_YelDuration = 0;
 8000942:	4b79      	ldr	r3, [pc, #484]	; (8000b28 <FSM_Config_Run+0x214>)
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
		inc_GrnDuration = 0;
 8000948:	4b78      	ldr	r3, [pc, #480]	; (8000b2c <FSM_Config_Run+0x218>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]

		status = RED_CONFIG;
 800094e:	4b74      	ldr	r3, [pc, #464]	; (8000b20 <FSM_Config_Run+0x20c>)
 8000950:	220a      	movs	r2, #10
 8000952:	601a      	str	r2, [r3, #0]

		setAllRedLED(OFF);
 8000954:	2000      	movs	r0, #0
 8000956:	f001 f8a7 	bl	8001aa8 <setAllRedLED>
		setAllYellowLED(OFF);
 800095a:	2000      	movs	r0, #0
 800095c:	f001 f8cc 	bl	8001af8 <setAllYellowLED>
		setAllGreenLED(OFF);
 8000960:	2000      	movs	r0, #0
 8000962:	f001 f8f1 	bl	8001b48 <setAllGreenLED>

		setTimer(3, 500);
 8000966:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800096a:	2003      	movs	r0, #3
 800096c:	f000 ff66 	bl	800183c <setTimer>
		setTimer(4, 500);
 8000970:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000974:	2004      	movs	r0, #4
 8000976:	f000 ff61 	bl	800183c <setTimer>

		updateLedBuffer(0, redDuration / 10);
 800097a:	4b6d      	ldr	r3, [pc, #436]	; (8000b30 <FSM_Config_Run+0x21c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a6d      	ldr	r2, [pc, #436]	; (8000b34 <FSM_Config_Run+0x220>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1092      	asrs	r2, r2, #2
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4619      	mov	r1, r3
 800098c:	2000      	movs	r0, #0
 800098e:	f000 fe05 	bl	800159c <updateLedBuffer>
		updateLedBuffer(1, redDuration % 10);
 8000992:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b67      	ldr	r3, [pc, #412]	; (8000b34 <FSM_Config_Run+0x220>)
 8000998:	fb83 1302 	smull	r1, r3, r3, r2
 800099c:	1099      	asrs	r1, r3, #2
 800099e:	17d3      	asrs	r3, r2, #31
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	460b      	mov	r3, r1
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	1ad1      	subs	r1, r2, r3
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fdf5 	bl	800159c <updateLedBuffer>
		updateLedBuffer(2, 0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2002      	movs	r0, #2
 80009b6:	f000 fdf1 	bl	800159c <updateLedBuffer>
		updateLedBuffer(3, 2);
 80009ba:	2102      	movs	r1, #2
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 fded 	bl	800159c <updateLedBuffer>
		break;
 80009c2:	e1f6      	b.n	8000db2 <FSM_Config_Run+0x49e>

	case RED_CONFIG:
		// Press button 1 to access YELLOW_CONFIG mode
		if (isButtonPressed(0) == 1) {
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fbc1 	bl	800014c <isButtonPressed>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d12c      	bne.n	8000a2a <FSM_Config_Run+0x116>
			status = YELLOW_CONFIG;
 80009d0:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <FSM_Config_Run+0x20c>)
 80009d2:	220b      	movs	r2, #11
 80009d4:	601a      	str	r2, [r3, #0]

			setAllRedLED(OFF);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f001 f866 	bl	8001aa8 <setAllRedLED>
			setAllYellowLED(ON);
 80009dc:	2001      	movs	r0, #1
 80009de:	f001 f88b 	bl	8001af8 <setAllYellowLED>

			updateLedBuffer(0, yellowDuration / 10);
 80009e2:	4b55      	ldr	r3, [pc, #340]	; (8000b38 <FSM_Config_Run+0x224>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a53      	ldr	r2, [pc, #332]	; (8000b34 <FSM_Config_Run+0x220>)
 80009e8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ec:	1092      	asrs	r2, r2, #2
 80009ee:	17db      	asrs	r3, r3, #31
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4619      	mov	r1, r3
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 fdd1 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, yellowDuration % 10);
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <FSM_Config_Run+0x224>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b4d      	ldr	r3, [pc, #308]	; (8000b34 <FSM_Config_Run+0x220>)
 8000a00:	fb83 1302 	smull	r1, r3, r3, r2
 8000a04:	1099      	asrs	r1, r3, #2
 8000a06:	17d3      	asrs	r3, r2, #31
 8000a08:	1ac9      	subs	r1, r1, r3
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	440b      	add	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	1ad1      	subs	r1, r2, r3
 8000a14:	2001      	movs	r0, #1
 8000a16:	f000 fdc1 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 fdbd 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 3);
 8000a22:	2103      	movs	r1, #3
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 fdb9 	bl	800159c <updateLedBuffer>
		}

		if (isButtonPressed(1) == 1) {
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f7ff fb8e 	bl	800014c <isButtonPressed>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d132      	bne.n	8000a9c <FSM_Config_Run+0x188>
			inc_RedDuration++;
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <FSM_Config_Run+0x210>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <FSM_Config_Run+0x210>)
 8000a3e:	6013      	str	r3, [r2, #0]
			if (inc_RedDuration + redDuration >= 100) {
 8000a40:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <FSM_Config_Run+0x210>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4413      	add	r3, r2
 8000a4a:	2b63      	cmp	r3, #99	; 0x63
 8000a4c:	dd04      	ble.n	8000a58 <FSM_Config_Run+0x144>
				inc_RedDuration = 0 - redDuration;
 8000a4e:	4b38      	ldr	r3, [pc, #224]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	425b      	negs	r3, r3
 8000a54:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <FSM_Config_Run+0x210>)
 8000a56:	6013      	str	r3, [r2, #0]
			}

			updateLedBuffer(0, (inc_RedDuration + redDuration) / 10);
 8000a58:	4b32      	ldr	r3, [pc, #200]	; (8000b24 <FSM_Config_Run+0x210>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a34      	ldr	r2, [pc, #208]	; (8000b34 <FSM_Config_Run+0x220>)
 8000a64:	fb82 1203 	smull	r1, r2, r2, r3
 8000a68:	1092      	asrs	r2, r2, #2
 8000a6a:	17db      	asrs	r3, r3, #31
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 fd93 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, (inc_RedDuration + redDuration) % 10);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <FSM_Config_Run+0x210>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	441a      	add	r2, r3
 8000a80:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <FSM_Config_Run+0x220>)
 8000a82:	fb83 1302 	smull	r1, r3, r3, r2
 8000a86:	1099      	asrs	r1, r3, #2
 8000a88:	17d3      	asrs	r3, r2, #31
 8000a8a:	1ac9      	subs	r1, r1, r3
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	440b      	add	r3, r1
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	1ad1      	subs	r1, r2, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fd80 	bl	800159c <updateLedBuffer>
		}

		if (isButtonPressed(2) == 1) {
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff fb55 	bl	800014c <isButtonPressed>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d125      	bne.n	8000af4 <FSM_Config_Run+0x1e0>
			redDuration = redDuration + inc_RedDuration;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <FSM_Config_Run+0x210>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000ab4:	6013      	str	r3, [r2, #0]
			inc_RedDuration = 0;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <FSM_Config_Run+0x210>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]

			updateLedBuffer(0, redDuration / 10);
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <FSM_Config_Run+0x220>)
 8000ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac6:	1092      	asrs	r2, r2, #2
 8000ac8:	17db      	asrs	r3, r3, #31
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	4619      	mov	r1, r3
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 fd64 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, redDuration % 10);
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <FSM_Config_Run+0x21c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <FSM_Config_Run+0x220>)
 8000ada:	fb83 1302 	smull	r1, r3, r3, r2
 8000ade:	1099      	asrs	r1, r3, #2
 8000ae0:	17d3      	asrs	r3, r2, #31
 8000ae2:	1ac9      	subs	r1, r1, r3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	1ad1      	subs	r1, r2, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 fd54 	bl	800159c <updateLedBuffer>
		}

		if (isTimerExpired(4) == 1) {
 8000af4:	2004      	movs	r0, #4
 8000af6:	f000 fec1 	bl	800187c <isTimerExpired>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	f040 8153 	bne.w	8000da8 <FSM_Config_Run+0x494>
			HAL_GPIO_TogglePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin);
 8000b02:	2101      	movs	r1, #1
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <FSM_Config_Run+0x228>)
 8000b06:	f001 fb88 	bl	800221a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin);
 8000b0a:	2108      	movs	r1, #8
 8000b0c:	480b      	ldr	r0, [pc, #44]	; (8000b3c <FSM_Config_Run+0x228>)
 8000b0e:	f001 fb84 	bl	800221a <HAL_GPIO_TogglePin>

			setTimer(4, 500);
 8000b12:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b16:	2004      	movs	r0, #4
 8000b18:	f000 fe90 	bl	800183c <setTimer>
		}
		break;
 8000b1c:	e144      	b.n	8000da8 <FSM_Config_Run+0x494>
 8000b1e:	bf00      	nop
 8000b20:	200000b0 	.word	0x200000b0
 8000b24:	200000a4 	.word	0x200000a4
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	200000ac 	.word	0x200000ac
 8000b30:	2000001c 	.word	0x2000001c
 8000b34:	66666667 	.word	0x66666667
 8000b38:	20000020 	.word	0x20000020
 8000b3c:	40010800 	.word	0x40010800

	case YELLOW_CONFIG:
		// Press button 1 to access GREEN_CONFIG mode
		if (isButtonPressed(0) == 1) {
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fb03 	bl	800014c <isButtonPressed>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d12c      	bne.n	8000ba6 <FSM_Config_Run+0x292>
			status = GREEN_CONFIG;
 8000b4c:	4ba9      	ldr	r3, [pc, #676]	; (8000df4 <FSM_Config_Run+0x4e0>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]

			setAllYellowLED(OFF);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 ffd0 	bl	8001af8 <setAllYellowLED>
			setAllGreenLED(ON);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f000 fff5 	bl	8001b48 <setAllGreenLED>

			updateLedBuffer(0, greenDuration / 10);
 8000b5e:	4ba6      	ldr	r3, [pc, #664]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4aa6      	ldr	r2, [pc, #664]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000b64:	fb82 1203 	smull	r1, r2, r2, r3
 8000b68:	1092      	asrs	r2, r2, #2
 8000b6a:	17db      	asrs	r3, r3, #31
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2000      	movs	r0, #0
 8000b72:	f000 fd13 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, greenDuration % 10);
 8000b76:	4ba0      	ldr	r3, [pc, #640]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	4ba0      	ldr	r3, [pc, #640]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000b7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b80:	1099      	asrs	r1, r3, #2
 8000b82:	17d3      	asrs	r3, r2, #31
 8000b84:	1ac9      	subs	r1, r1, r3
 8000b86:	460b      	mov	r3, r1
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	1ad1      	subs	r1, r2, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fd03 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, 0);
 8000b96:	2100      	movs	r1, #0
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f000 fcff 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, 4);
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 fcfb 	bl	800159c <updateLedBuffer>
		}

		if (isButtonPressed(1) == 1) {
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	f7ff fad0 	bl	800014c <isButtonPressed>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d132      	bne.n	8000c18 <FSM_Config_Run+0x304>
			inc_YelDuration++;
 8000bb2:	4b93      	ldr	r3, [pc, #588]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a91      	ldr	r2, [pc, #580]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000bba:	6013      	str	r3, [r2, #0]
			if (inc_YelDuration + yellowDuration >= 100) {
 8000bbc:	4b90      	ldr	r3, [pc, #576]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b90      	ldr	r3, [pc, #576]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2b63      	cmp	r3, #99	; 0x63
 8000bc8:	dd04      	ble.n	8000bd4 <FSM_Config_Run+0x2c0>
				inc_YelDuration = 0 - yellowDuration;
 8000bca:	4b8e      	ldr	r3, [pc, #568]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	425b      	negs	r3, r3
 8000bd0:	4a8b      	ldr	r2, [pc, #556]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000bd2:	6013      	str	r3, [r2, #0]
			}

			updateLedBuffer(0, (inc_YelDuration + yellowDuration) / 10);
 8000bd4:	4b8a      	ldr	r3, [pc, #552]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b8a      	ldr	r3, [pc, #552]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a87      	ldr	r2, [pc, #540]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000be0:	fb82 1203 	smull	r1, r2, r2, r3
 8000be4:	1092      	asrs	r2, r2, #2
 8000be6:	17db      	asrs	r3, r3, #31
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	4619      	mov	r1, r3
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fcd5 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, (inc_YelDuration + yellowDuration) % 10);
 8000bf2:	4b83      	ldr	r3, [pc, #524]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b83      	ldr	r3, [pc, #524]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	4b7f      	ldr	r3, [pc, #508]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000bfe:	fb83 1302 	smull	r1, r3, r3, r2
 8000c02:	1099      	asrs	r1, r3, #2
 8000c04:	17d3      	asrs	r3, r2, #31
 8000c06:	1ac9      	subs	r1, r1, r3
 8000c08:	460b      	mov	r3, r1
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	1ad1      	subs	r1, r2, r3
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fcc2 	bl	800159c <updateLedBuffer>
		}

		if (isButtonPressed(2) == 1) {
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fa97 	bl	800014c <isButtonPressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d125      	bne.n	8000c70 <FSM_Config_Run+0x35c>
			yellowDuration = yellowDuration + inc_YelDuration;
 8000c24:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b75      	ldr	r3, [pc, #468]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a75      	ldr	r2, [pc, #468]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000c30:	6013      	str	r3, [r2, #0]
			inc_YelDuration = 0;
 8000c32:	4b73      	ldr	r3, [pc, #460]	; (8000e00 <FSM_Config_Run+0x4ec>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

			updateLedBuffer(0, yellowDuration / 10);
 8000c38:	4b72      	ldr	r3, [pc, #456]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a6f      	ldr	r2, [pc, #444]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000c3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c42:	1092      	asrs	r2, r2, #2
 8000c44:	17db      	asrs	r3, r3, #31
 8000c46:	1ad3      	subs	r3, r2, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fca6 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, yellowDuration % 10);
 8000c50:	4b6c      	ldr	r3, [pc, #432]	; (8000e04 <FSM_Config_Run+0x4f0>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000c56:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5a:	1099      	asrs	r1, r3, #2
 8000c5c:	17d3      	asrs	r3, r2, #31
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	460b      	mov	r3, r1
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	440b      	add	r3, r1
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	1ad1      	subs	r1, r2, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fc96 	bl	800159c <updateLedBuffer>
		}

		if (isTimerExpired(4) == 1) {
 8000c70:	2004      	movs	r0, #4
 8000c72:	f000 fe03 	bl	800187c <isTimerExpired>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	f040 8097 	bne.w	8000dac <FSM_Config_Run+0x498>
			HAL_GPIO_TogglePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin);
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4861      	ldr	r0, [pc, #388]	; (8000e08 <FSM_Config_Run+0x4f4>)
 8000c82:	f001 faca 	bl	800221a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin);
 8000c86:	2110      	movs	r1, #16
 8000c88:	485f      	ldr	r0, [pc, #380]	; (8000e08 <FSM_Config_Run+0x4f4>)
 8000c8a:	f001 fac6 	bl	800221a <HAL_GPIO_TogglePin>

			setTimer(4, 500);
 8000c8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c92:	2004      	movs	r0, #4
 8000c94:	f000 fdd2 	bl	800183c <setTimer>
		}
		break;
 8000c98:	e088      	b.n	8000dac <FSM_Config_Run+0x498>

	case GREEN_CONFIG:
		// Press button 1 to return to AUTO MODE
		if (isButtonPressed(0) == 1) {
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fa56 	bl	800014c <isButtonPressed>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d105      	bne.n	8000cb2 <FSM_Config_Run+0x39e>
			setAllGreenLED(OFF);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f000 ff4e 	bl	8001b48 <setAllGreenLED>

			status = INIT_AUTO;
 8000cac:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <FSM_Config_Run+0x4e0>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(1) == 1) {
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff fa4a 	bl	800014c <isButtonPressed>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d132      	bne.n	8000d24 <FSM_Config_Run+0x410>
			inc_GrnDuration++;
 8000cbe:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a51      	ldr	r2, [pc, #324]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000cc6:	6013      	str	r3, [r2, #0]
			if (inc_GrnDuration + greenDuration >= 100) {
 8000cc8:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	2b63      	cmp	r3, #99	; 0x63
 8000cd4:	dd04      	ble.n	8000ce0 <FSM_Config_Run+0x3cc>
				inc_GrnDuration = 0 - greenDuration;
 8000cd6:	4b48      	ldr	r3, [pc, #288]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	425b      	negs	r3, r3
 8000cdc:	4a4b      	ldr	r2, [pc, #300]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000cde:	6013      	str	r3, [r2, #0]
			}

			updateLedBuffer(0, (inc_GrnDuration + greenDuration) / 10);
 8000ce0:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b44      	ldr	r3, [pc, #272]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a44      	ldr	r2, [pc, #272]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000cec:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf0:	1092      	asrs	r2, r2, #2
 8000cf2:	17db      	asrs	r3, r3, #31
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fc4f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, (inc_GrnDuration + greenDuration) % 10);
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b3d      	ldr	r3, [pc, #244]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	441a      	add	r2, r3
 8000d08:	4b3c      	ldr	r3, [pc, #240]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	1099      	asrs	r1, r3, #2
 8000d10:	17d3      	asrs	r3, r2, #31
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	460b      	mov	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	1ad1      	subs	r1, r2, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f000 fc3c 	bl	800159c <updateLedBuffer>
		}

		if (isButtonPressed(2) == 1) {
 8000d24:	2002      	movs	r0, #2
 8000d26:	f7ff fa11 	bl	800014c <isButtonPressed>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d125      	bne.n	8000d7c <FSM_Config_Run+0x468>
			greenDuration = greenDuration + inc_GrnDuration;
 8000d30:	4b31      	ldr	r3, [pc, #196]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a2f      	ldr	r2, [pc, #188]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000d3c:	6013      	str	r3, [r2, #0]
			inc_GrnDuration = 0;
 8000d3e:	4b33      	ldr	r3, [pc, #204]	; (8000e0c <FSM_Config_Run+0x4f8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

			updateLedBuffer(0, greenDuration / 10);
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4e:	1092      	asrs	r2, r2, #2
 8000d50:	17db      	asrs	r3, r3, #31
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fc20 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, greenDuration % 10);
 8000d5c:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <FSM_Config_Run+0x4e4>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <FSM_Config_Run+0x4e8>)
 8000d62:	fb83 1302 	smull	r1, r3, r3, r2
 8000d66:	1099      	asrs	r1, r3, #2
 8000d68:	17d3      	asrs	r3, r2, #31
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	1ad1      	subs	r1, r2, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fc10 	bl	800159c <updateLedBuffer>
		}

		if (isTimerExpired(4) == 1) {
 8000d7c:	2004      	movs	r0, #4
 8000d7e:	f000 fd7d 	bl	800187c <isTimerExpired>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d113      	bne.n	8000db0 <FSM_Config_Run+0x49c>
			HAL_GPIO_TogglePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin);
 8000d88:	2104      	movs	r1, #4
 8000d8a:	481f      	ldr	r0, [pc, #124]	; (8000e08 <FSM_Config_Run+0x4f4>)
 8000d8c:	f001 fa45 	bl	800221a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin);
 8000d90:	2120      	movs	r1, #32
 8000d92:	481d      	ldr	r0, [pc, #116]	; (8000e08 <FSM_Config_Run+0x4f4>)
 8000d94:	f001 fa41 	bl	800221a <HAL_GPIO_TogglePin>

			setTimer(4, 500);
 8000d98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f000 fd4d 	bl	800183c <setTimer>
		}
		break;
 8000da2:	e005      	b.n	8000db0 <FSM_Config_Run+0x49c>

	default:
		break;
 8000da4:	bf00      	nop
 8000da6:	e004      	b.n	8000db2 <FSM_Config_Run+0x49e>
		break;
 8000da8:	bf00      	nop
 8000daa:	e002      	b.n	8000db2 <FSM_Config_Run+0x49e>
		break;
 8000dac:	bf00      	nop
 8000dae:	e000      	b.n	8000db2 <FSM_Config_Run+0x49e>
		break;
 8000db0:	bf00      	nop
	}

	// Scan 4 7-segment LEDs with the frequency of 0.5Hz
	if (isTimerExpired(3) == 1) {
 8000db2:	2003      	movs	r0, #3
 8000db4:	f000 fd62 	bl	800187c <isTimerExpired>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d117      	bne.n	8000dee <FSM_Config_Run+0x4da>
		update7SEG(index_led++);
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <FSM_Config_Run+0x4fc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	4912      	ldr	r1, [pc, #72]	; (8000e10 <FSM_Config_Run+0x4fc>)
 8000dc6:	600a      	str	r2, [r1, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 fb51 	bl	8001470 <update7SEG>
		index_led = index_led % 4;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <FSM_Config_Run+0x4fc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	425a      	negs	r2, r3
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	bf58      	it	pl
 8000dde:	4253      	negpl	r3, r2
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <FSM_Config_Run+0x4fc>)
 8000de2:	6013      	str	r3, [r2, #0]
		setTimer(3, 500);
 8000de4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 fd27 	bl	800183c <setTimer>
	}
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000b0 	.word	0x200000b0
 8000df8:	20000024 	.word	0x20000024
 8000dfc:	66666667 	.word	0x66666667
 8000e00:	200000a8 	.word	0x200000a8
 8000e04:	20000020 	.word	0x20000020
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	200000ac 	.word	0x200000ac
 8000e10:	200000b4 	.word	0x200000b4

08000e14 <FSM_Manual_Run>:
/* Variables */
int initCounter = 5;
int modeCounter = 5;

/* Functions */
void FSM_Manual_Run(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	switch (status) {
 8000e18:	4ba2      	ldr	r3, [pc, #648]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b09      	cmp	r3, #9
 8000e1e:	d008      	beq.n	8000e32 <FSM_Manual_Run+0x1e>
 8000e20:	2b09      	cmp	r3, #9
 8000e22:	f300 8117 	bgt.w	8001054 <FSM_Manual_Run+0x240>
 8000e26:	2b07      	cmp	r3, #7
 8000e28:	d03d      	beq.n	8000ea6 <FSM_Manual_Run+0x92>
 8000e2a:	2b08      	cmp	r3, #8
 8000e2c:	f000 80a4 	beq.w	8000f78 <FSM_Manual_Run+0x164>
			updateLedBuffer(3, modeCounter % 10);
		}
		break;

	default:
		break;
 8000e30:	e110      	b.n	8001054 <FSM_Manual_Run+0x240>
		setAllRedLED(OFF);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 fe38 	bl	8001aa8 <setAllRedLED>
		setAllYellowLED(OFF);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 fe5d 	bl	8001af8 <setAllYellowLED>
		setAllGreenLED(OFF);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fe82 	bl	8001b48 <setAllGreenLED>
		setTimer(6, 1000 * modeCounter);
 8000e44:	4b98      	ldr	r3, [pc, #608]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	2006      	movs	r0, #6
 8000e54:	f000 fcf2 	bl	800183c <setTimer>
		if (isButtonPressed(0) == 1) {
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff f977 	bl	800014c <isButtonPressed>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d102      	bne.n	8000e6a <FSM_Manual_Run+0x56>
			status = RED_GREEN_MAN;
 8000e64:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000e66:	2207      	movs	r2, #7
 8000e68:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(1) == 1) {
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff f96e 	bl	800014c <isButtonPressed>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d102      	bne.n	8000e7c <FSM_Manual_Run+0x68>
			status = GREEN_RED_MAN;
 8000e76:	4b8b      	ldr	r3, [pc, #556]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000e78:	2208      	movs	r2, #8
 8000e7a:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(0) == 1) {
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f000 fcfd 	bl	800187c <isTimerExpired>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	f040 80e7 	bne.w	8001058 <FSM_Manual_Run+0x244>
			status = INIT_AUTO;
 8000e8a:	4b86      	ldr	r3, [pc, #536]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
			setTimer(0, 1000 * initCounter);
 8000e90:	4b86      	ldr	r3, [pc, #536]	; (80010ac <FSM_Manual_Run+0x298>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fccc 	bl	800183c <setTimer>
		break;
 8000ea4:	e0d8      	b.n	8001058 <FSM_Manual_Run+0x244>
		setLightWay1(RESET, SET, SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2000      	movs	r0, #0
 8000eac:	f000 fdb8 	bl	8001a20 <setLightWay1>
		setLightWay2(SET, SET, RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 fdd5 	bl	8001a64 <setLightWay2>
		if (isButtonPressed(1) == 1) {
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f7ff f946 	bl	800014c <isButtonPressed>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d102      	bne.n	8000ecc <FSM_Manual_Run+0xb8>
			status = GREEN_RED_MAN;
 8000ec6:	4b77      	ldr	r3, [pc, #476]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000ec8:	2208      	movs	r2, #8
 8000eca:	601a      	str	r2, [r3, #0]
		if (isButtonLongPressed(0) == 1) {
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff f957 	bl	8000180 <isButtonLongPressed>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d102      	bne.n	8000ede <FSM_Manual_Run+0xca>
			status = INIT_AUTO;
 8000ed8:	4b72      	ldr	r3, [pc, #456]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(6) == 1) {
 8000ede:	2006      	movs	r0, #6
 8000ee0:	f000 fccc 	bl	800187c <isTimerExpired>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	f040 80b8 	bne.w	800105c <FSM_Manual_Run+0x248>
			status = INIT_AUTO;
 8000eec:	4b6d      	ldr	r3, [pc, #436]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
			setTimer(6, 1000 * modeCounter);
 8000ef2:	4b6d      	ldr	r3, [pc, #436]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	2006      	movs	r0, #6
 8000f02:	f000 fc9b 	bl	800183c <setTimer>
			updateLedBuffer(0, modeCounter / 10);
 8000f06:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a69      	ldr	r2, [pc, #420]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8000f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f10:	1092      	asrs	r2, r2, #2
 8000f12:	17db      	asrs	r3, r3, #31
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	4619      	mov	r1, r3
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 fb3f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, modeCounter % 10);
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8000f24:	fb83 1302 	smull	r1, r3, r3, r2
 8000f28:	1099      	asrs	r1, r3, #2
 8000f2a:	17d3      	asrs	r3, r2, #31
 8000f2c:	1ac9      	subs	r1, r1, r3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	1ad1      	subs	r1, r2, r3
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f000 fb2f 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, modeCounter / 10);
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1092      	asrs	r2, r2, #2
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2002      	movs	r0, #2
 8000f52:	f000 fb23 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, modeCounter % 10);
 8000f56:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b55      	ldr	r3, [pc, #340]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8000f5c:	fb83 1302 	smull	r1, r3, r3, r2
 8000f60:	1099      	asrs	r1, r3, #2
 8000f62:	17d3      	asrs	r3, r2, #31
 8000f64:	1ac9      	subs	r1, r1, r3
 8000f66:	460b      	mov	r3, r1
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	1ad1      	subs	r1, r2, r3
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 fb13 	bl	800159c <updateLedBuffer>
		break;
 8000f76:	e071      	b.n	800105c <FSM_Manual_Run+0x248>
		setLightWay1(SET, SET, RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 fd4f 	bl	8001a20 <setLightWay1>
		setLightWay2(RESET, SET, SET);
 8000f82:	2201      	movs	r2, #1
 8000f84:	2101      	movs	r1, #1
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 fd6c 	bl	8001a64 <setLightWay2>
		if (isButtonPressed(0) == 1) {
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff f8dd 	bl	800014c <isButtonPressed>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d102      	bne.n	8000f9e <FSM_Manual_Run+0x18a>
			status = RED_GREEN_MAN;
 8000f98:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	601a      	str	r2, [r3, #0]
		if ((isButtonLongPressed(1) == 1) || (isTimerExpired(6) == 1)) {
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f7ff f8ee 	bl	8000180 <isButtonLongPressed>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <FSM_Manual_Run+0x1a2>
 8000faa:	2006      	movs	r0, #6
 8000fac:	f000 fc66 	bl	800187c <isTimerExpired>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d102      	bne.n	8000fbc <FSM_Manual_Run+0x1a8>
			status = INIT_AUTO;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
		if (isTimerExpired(6) == 1) {
 8000fbc:	2006      	movs	r0, #6
 8000fbe:	f000 fc5d 	bl	800187c <isTimerExpired>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d14b      	bne.n	8001060 <FSM_Manual_Run+0x24c>
			status = INIT_AUTO;
 8000fc8:	4b36      	ldr	r3, [pc, #216]	; (80010a4 <FSM_Manual_Run+0x290>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
			setTimer(6, 1000 * modeCounter);
 8000fce:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2006      	movs	r0, #6
 8000fde:	f000 fc2d 	bl	800183c <setTimer>
			updateLedBuffer(0, modeCounter / 10);
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8000fe8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fec:	1092      	asrs	r2, r2, #2
 8000fee:	17db      	asrs	r3, r3, #31
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fad1 	bl	800159c <updateLedBuffer>
			updateLedBuffer(1, modeCounter % 10);
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <FSM_Manual_Run+0x294>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b2c      	ldr	r3, [pc, #176]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8001000:	fb83 1302 	smull	r1, r3, r3, r2
 8001004:	1099      	asrs	r1, r3, #2
 8001006:	17d3      	asrs	r3, r2, #31
 8001008:	1ac9      	subs	r1, r1, r3
 800100a:	460b      	mov	r3, r1
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	1ad1      	subs	r1, r2, r3
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fac1 	bl	800159c <updateLedBuffer>
			updateLedBuffer(2, modeCounter / 10);
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <FSM_Manual_Run+0x294>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8001020:	fb82 1203 	smull	r1, r2, r2, r3
 8001024:	1092      	asrs	r2, r2, #2
 8001026:	17db      	asrs	r3, r3, #31
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4619      	mov	r1, r3
 800102c:	2002      	movs	r0, #2
 800102e:	f000 fab5 	bl	800159c <updateLedBuffer>
			updateLedBuffer(3, modeCounter % 10);
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <FSM_Manual_Run+0x294>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <FSM_Manual_Run+0x29c>)
 8001038:	fb83 1302 	smull	r1, r3, r3, r2
 800103c:	1099      	asrs	r1, r3, #2
 800103e:	17d3      	asrs	r3, r2, #31
 8001040:	1ac9      	subs	r1, r1, r3
 8001042:	460b      	mov	r3, r1
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	1ad1      	subs	r1, r2, r3
 800104c:	2003      	movs	r0, #3
 800104e:	f000 faa5 	bl	800159c <updateLedBuffer>
		break;
 8001052:	e005      	b.n	8001060 <FSM_Manual_Run+0x24c>
		break;
 8001054:	bf00      	nop
 8001056:	e004      	b.n	8001062 <FSM_Manual_Run+0x24e>
		break;
 8001058:	bf00      	nop
 800105a:	e002      	b.n	8001062 <FSM_Manual_Run+0x24e>
		break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <FSM_Manual_Run+0x24e>
		break;
 8001060:	bf00      	nop
	}

	// Scan 4 7-segment LEDs with the frequency of 0.5Hz
	if (isTimerExpired(3) == 1) {
 8001062:	2003      	movs	r0, #3
 8001064:	f000 fc0a 	bl	800187c <isTimerExpired>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d117      	bne.n	800109e <FSM_Manual_Run+0x28a>
		update7SEG(index_led++);
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <FSM_Manual_Run+0x2a0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	490f      	ldr	r1, [pc, #60]	; (80010b4 <FSM_Manual_Run+0x2a0>)
 8001076:	600a      	str	r2, [r1, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f9f9 	bl	8001470 <update7SEG>
		index_led = index_led % 4;
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <FSM_Manual_Run+0x2a0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	425a      	negs	r2, r3
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	f002 0203 	and.w	r2, r2, #3
 800108c:	bf58      	it	pl
 800108e:	4253      	negpl	r3, r2
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <FSM_Manual_Run+0x2a0>)
 8001092:	6013      	str	r3, [r2, #0]
		setTimer(3, 500);
 8001094:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fbcf 	bl	800183c <setTimer>
	}
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000b0 	.word	0x200000b0
 80010a8:	20000018 	.word	0x20000018
 80010ac:	20000014 	.word	0x20000014
 80010b0:	66666667 	.word	0x66666667
 80010b4:	200000b4 	.word	0x200000b4

080010b8 <display7SEG>:
/**
 * @brief	Display number on 7-segment LED
 * @param	num : The number displayed on LED
 * @retval	None
 */
void display7SEG(int num) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	switch (num) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b09      	cmp	r3, #9
 80010c4:	f200 8180 	bhi.w	80013c8 <display7SEG+0x310>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <display7SEG+0x18>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	08001141 	.word	0x08001141
 80010d8:	08001189 	.word	0x08001189
 80010dc:	080011d1 	.word	0x080011d1
 80010e0:	08001219 	.word	0x08001219
 80010e4:	08001261 	.word	0x08001261
 80010e8:	080012a9 	.word	0x080012a9
 80010ec:	080012f1 	.word	0x080012f1
 80010f0:	08001339 	.word	0x08001339
 80010f4:	08001381 	.word	0x08001381
	case 0:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2101      	movs	r1, #1
 80010fc:	48c6      	ldr	r0, [pc, #792]	; (8001418 <display7SEG+0x360>)
 80010fe:	f001 f874 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2102      	movs	r1, #2
 8001106:	48c4      	ldr	r0, [pc, #784]	; (8001418 <display7SEG+0x360>)
 8001108:	f001 f86f 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2104      	movs	r1, #4
 8001110:	48c1      	ldr	r0, [pc, #772]	; (8001418 <display7SEG+0x360>)
 8001112:	f001 f86a 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	48bf      	ldr	r0, [pc, #764]	; (8001418 <display7SEG+0x360>)
 800111c:	f001 f865 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2110      	movs	r1, #16
 8001124:	48bc      	ldr	r0, [pc, #752]	; (8001418 <display7SEG+0x360>)
 8001126:	f001 f860 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2120      	movs	r1, #32
 800112e:	48ba      	ldr	r0, [pc, #744]	; (8001418 <display7SEG+0x360>)
 8001130:	f001 f85b 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	48b7      	ldr	r0, [pc, #732]	; (8001418 <display7SEG+0x360>)
 800113a:	f001 f856 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 800113e:	e167      	b.n	8001410 <display7SEG+0x358>

	case 1:
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	48b4      	ldr	r0, [pc, #720]	; (8001418 <display7SEG+0x360>)
 8001146:	f001 f850 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	48b2      	ldr	r0, [pc, #712]	; (8001418 <display7SEG+0x360>)
 8001150:	f001 f84b 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2101      	movs	r1, #1
 8001158:	48af      	ldr	r0, [pc, #700]	; (8001418 <display7SEG+0x360>)
 800115a:	f001 f846 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2108      	movs	r1, #8
 8001162:	48ad      	ldr	r0, [pc, #692]	; (8001418 <display7SEG+0x360>)
 8001164:	f001 f841 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8001168:	2201      	movs	r2, #1
 800116a:	2110      	movs	r1, #16
 800116c:	48aa      	ldr	r0, [pc, #680]	; (8001418 <display7SEG+0x360>)
 800116e:	f001 f83c 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2120      	movs	r1, #32
 8001176:	48a8      	ldr	r0, [pc, #672]	; (8001418 <display7SEG+0x360>)
 8001178:	f001 f837 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	48a5      	ldr	r0, [pc, #660]	; (8001418 <display7SEG+0x360>)
 8001182:	f001 f832 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001186:	e143      	b.n	8001410 <display7SEG+0x358>

	case 2:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2101      	movs	r1, #1
 800118c:	48a2      	ldr	r0, [pc, #648]	; (8001418 <display7SEG+0x360>)
 800118e:	f001 f82c 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2102      	movs	r1, #2
 8001196:	48a0      	ldr	r0, [pc, #640]	; (8001418 <display7SEG+0x360>)
 8001198:	f001 f827 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2108      	movs	r1, #8
 80011a0:	489d      	ldr	r0, [pc, #628]	; (8001418 <display7SEG+0x360>)
 80011a2:	f001 f822 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16
 80011aa:	489b      	ldr	r0, [pc, #620]	; (8001418 <display7SEG+0x360>)
 80011ac:	f001 f81d 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	4898      	ldr	r0, [pc, #608]	; (8001418 <display7SEG+0x360>)
 80011b6:	f001 f818 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	2104      	movs	r1, #4
 80011be:	4896      	ldr	r0, [pc, #600]	; (8001418 <display7SEG+0x360>)
 80011c0:	f001 f813 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2120      	movs	r1, #32
 80011c8:	4893      	ldr	r0, [pc, #588]	; (8001418 <display7SEG+0x360>)
 80011ca:	f001 f80e 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 80011ce:	e11f      	b.n	8001410 <display7SEG+0x358>

	case 3:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2101      	movs	r1, #1
 80011d4:	4890      	ldr	r0, [pc, #576]	; (8001418 <display7SEG+0x360>)
 80011d6:	f001 f808 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2102      	movs	r1, #2
 80011de:	488e      	ldr	r0, [pc, #568]	; (8001418 <display7SEG+0x360>)
 80011e0:	f001 f803 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2104      	movs	r1, #4
 80011e8:	488b      	ldr	r0, [pc, #556]	; (8001418 <display7SEG+0x360>)
 80011ea:	f000 fffe 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2108      	movs	r1, #8
 80011f2:	4889      	ldr	r0, [pc, #548]	; (8001418 <display7SEG+0x360>)
 80011f4:	f000 fff9 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2140      	movs	r1, #64	; 0x40
 80011fc:	4886      	ldr	r0, [pc, #536]	; (8001418 <display7SEG+0x360>)
 80011fe:	f000 fff4 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2110      	movs	r1, #16
 8001206:	4884      	ldr	r0, [pc, #528]	; (8001418 <display7SEG+0x360>)
 8001208:	f000 ffef 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2120      	movs	r1, #32
 8001210:	4881      	ldr	r0, [pc, #516]	; (8001418 <display7SEG+0x360>)
 8001212:	f000 ffea 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001216:	e0fb      	b.n	8001410 <display7SEG+0x358>

	case 4:
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2102      	movs	r1, #2
 800121c:	487e      	ldr	r0, [pc, #504]	; (8001418 <display7SEG+0x360>)
 800121e:	f000 ffe4 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2104      	movs	r1, #4
 8001226:	487c      	ldr	r0, [pc, #496]	; (8001418 <display7SEG+0x360>)
 8001228:	f000 ffdf 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2120      	movs	r1, #32
 8001230:	4879      	ldr	r0, [pc, #484]	; (8001418 <display7SEG+0x360>)
 8001232:	f000 ffda 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4877      	ldr	r0, [pc, #476]	; (8001418 <display7SEG+0x360>)
 800123c:	f000 ffd5 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 8001240:	2201      	movs	r2, #1
 8001242:	2101      	movs	r1, #1
 8001244:	4874      	ldr	r0, [pc, #464]	; (8001418 <display7SEG+0x360>)
 8001246:	f000 ffd0 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2108      	movs	r1, #8
 800124e:	4872      	ldr	r0, [pc, #456]	; (8001418 <display7SEG+0x360>)
 8001250:	f000 ffcb 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8001254:	2201      	movs	r2, #1
 8001256:	2110      	movs	r1, #16
 8001258:	486f      	ldr	r0, [pc, #444]	; (8001418 <display7SEG+0x360>)
 800125a:	f000 ffc6 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 800125e:	e0d7      	b.n	8001410 <display7SEG+0x358>

	case 5:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2101      	movs	r1, #1
 8001264:	486c      	ldr	r0, [pc, #432]	; (8001418 <display7SEG+0x360>)
 8001266:	f000 ffc0 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2104      	movs	r1, #4
 800126e:	486a      	ldr	r0, [pc, #424]	; (8001418 <display7SEG+0x360>)
 8001270:	f000 ffbb 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2108      	movs	r1, #8
 8001278:	4867      	ldr	r0, [pc, #412]	; (8001418 <display7SEG+0x360>)
 800127a:	f000 ffb6 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	4865      	ldr	r0, [pc, #404]	; (8001418 <display7SEG+0x360>)
 8001284:	f000 ffb1 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4862      	ldr	r0, [pc, #392]	; (8001418 <display7SEG+0x360>)
 800128e:	f000 ffac 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2102      	movs	r1, #2
 8001296:	4860      	ldr	r0, [pc, #384]	; (8001418 <display7SEG+0x360>)
 8001298:	f000 ffa7 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2110      	movs	r1, #16
 80012a0:	485d      	ldr	r0, [pc, #372]	; (8001418 <display7SEG+0x360>)
 80012a2:	f000 ffa2 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 80012a6:	e0b3      	b.n	8001410 <display7SEG+0x358>

	case 6:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2101      	movs	r1, #1
 80012ac:	485a      	ldr	r0, [pc, #360]	; (8001418 <display7SEG+0x360>)
 80012ae:	f000 ff9c 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2104      	movs	r1, #4
 80012b6:	4858      	ldr	r0, [pc, #352]	; (8001418 <display7SEG+0x360>)
 80012b8:	f000 ff97 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2108      	movs	r1, #8
 80012c0:	4855      	ldr	r0, [pc, #340]	; (8001418 <display7SEG+0x360>)
 80012c2:	f000 ff92 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2110      	movs	r1, #16
 80012ca:	4853      	ldr	r0, [pc, #332]	; (8001418 <display7SEG+0x360>)
 80012cc:	f000 ff8d 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2120      	movs	r1, #32
 80012d4:	4850      	ldr	r0, [pc, #320]	; (8001418 <display7SEG+0x360>)
 80012d6:	f000 ff88 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2140      	movs	r1, #64	; 0x40
 80012de:	484e      	ldr	r0, [pc, #312]	; (8001418 <display7SEG+0x360>)
 80012e0:	f000 ff83 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2102      	movs	r1, #2
 80012e8:	484b      	ldr	r0, [pc, #300]	; (8001418 <display7SEG+0x360>)
 80012ea:	f000 ff7e 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 80012ee:	e08f      	b.n	8001410 <display7SEG+0x358>

	case 7:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2101      	movs	r1, #1
 80012f4:	4848      	ldr	r0, [pc, #288]	; (8001418 <display7SEG+0x360>)
 80012f6:	f000 ff78 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	4846      	ldr	r0, [pc, #280]	; (8001418 <display7SEG+0x360>)
 8001300:	f000 ff73 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2104      	movs	r1, #4
 8001308:	4843      	ldr	r0, [pc, #268]	; (8001418 <display7SEG+0x360>)
 800130a:	f000 ff6e 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2108      	movs	r1, #8
 8001312:	4841      	ldr	r0, [pc, #260]	; (8001418 <display7SEG+0x360>)
 8001314:	f000 ff69 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8001318:	2201      	movs	r2, #1
 800131a:	2110      	movs	r1, #16
 800131c:	483e      	ldr	r0, [pc, #248]	; (8001418 <display7SEG+0x360>)
 800131e:	f000 ff64 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 8001322:	2201      	movs	r2, #1
 8001324:	2120      	movs	r1, #32
 8001326:	483c      	ldr	r0, [pc, #240]	; (8001418 <display7SEG+0x360>)
 8001328:	f000 ff5f 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 800132c:	2201      	movs	r2, #1
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	4839      	ldr	r0, [pc, #228]	; (8001418 <display7SEG+0x360>)
 8001332:	f000 ff5a 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001336:	e06b      	b.n	8001410 <display7SEG+0x358>

	case 8:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2101      	movs	r1, #1
 800133c:	4836      	ldr	r0, [pc, #216]	; (8001418 <display7SEG+0x360>)
 800133e:	f000 ff54 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	2102      	movs	r1, #2
 8001346:	4834      	ldr	r0, [pc, #208]	; (8001418 <display7SEG+0x360>)
 8001348:	f000 ff4f 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2104      	movs	r1, #4
 8001350:	4831      	ldr	r0, [pc, #196]	; (8001418 <display7SEG+0x360>)
 8001352:	f000 ff4a 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2108      	movs	r1, #8
 800135a:	482f      	ldr	r0, [pc, #188]	; (8001418 <display7SEG+0x360>)
 800135c:	f000 ff45 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2110      	movs	r1, #16
 8001364:	482c      	ldr	r0, [pc, #176]	; (8001418 <display7SEG+0x360>)
 8001366:	f000 ff40 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	482a      	ldr	r0, [pc, #168]	; (8001418 <display7SEG+0x360>)
 8001370:	f000 ff3b 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2140      	movs	r1, #64	; 0x40
 8001378:	4827      	ldr	r0, [pc, #156]	; (8001418 <display7SEG+0x360>)
 800137a:	f000 ff36 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 800137e:	e047      	b.n	8001410 <display7SEG+0x358>

	case 9:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	4824      	ldr	r0, [pc, #144]	; (8001418 <display7SEG+0x360>)
 8001386:	f000 ff30 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2102      	movs	r1, #2
 800138e:	4822      	ldr	r0, [pc, #136]	; (8001418 <display7SEG+0x360>)
 8001390:	f000 ff2b 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	481f      	ldr	r0, [pc, #124]	; (8001418 <display7SEG+0x360>)
 800139a:	f000 ff26 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2108      	movs	r1, #8
 80013a2:	481d      	ldr	r0, [pc, #116]	; (8001418 <display7SEG+0x360>)
 80013a4:	f000 ff21 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2120      	movs	r1, #32
 80013ac:	481a      	ldr	r0, [pc, #104]	; (8001418 <display7SEG+0x360>)
 80013ae:	f000 ff1c 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4818      	ldr	r0, [pc, #96]	; (8001418 <display7SEG+0x360>)
 80013b8:	f000 ff17 	bl	80021ea <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2110      	movs	r1, #16
 80013c0:	4815      	ldr	r0, [pc, #84]	; (8001418 <display7SEG+0x360>)
 80013c2:	f000 ff12 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 80013c6:	e023      	b.n	8001410 <display7SEG+0x358>

	default:
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2101      	movs	r1, #1
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <display7SEG+0x360>)
 80013ce:	f000 ff0c 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 80013d2:	2201      	movs	r2, #1
 80013d4:	2102      	movs	r1, #2
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <display7SEG+0x360>)
 80013d8:	f000 ff07 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2104      	movs	r1, #4
 80013e0:	480d      	ldr	r0, [pc, #52]	; (8001418 <display7SEG+0x360>)
 80013e2:	f000 ff02 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2108      	movs	r1, #8
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <display7SEG+0x360>)
 80013ec:	f000 fefd 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2110      	movs	r1, #16
 80013f4:	4808      	ldr	r0, [pc, #32]	; (8001418 <display7SEG+0x360>)
 80013f6:	f000 fef8 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2120      	movs	r1, #32
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <display7SEG+0x360>)
 8001400:	f000 fef3 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 8001404:	2201      	movs	r2, #1
 8001406:	2140      	movs	r1, #64	; 0x40
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <display7SEG+0x360>)
 800140a:	f000 feee 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 800140e:	bf00      	nop
	}
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40010c00 	.word	0x40010c00

0800141c <clear7SEG>:
/**
 * @brief	Clear number on 7-segment LED
 * @param	None
 * @retval	None
 */
void clear7SEG(void) {
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2101      	movs	r1, #1
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <clear7SEG+0x50>)
 8001426:	f000 fee0 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2102      	movs	r1, #2
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <clear7SEG+0x50>)
 8001430:	f000 fedb 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2104      	movs	r1, #4
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <clear7SEG+0x50>)
 800143a:	f000 fed6 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2108      	movs	r1, #8
 8001442:	480a      	ldr	r0, [pc, #40]	; (800146c <clear7SEG+0x50>)
 8001444:	f000 fed1 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 8001448:	2201      	movs	r2, #1
 800144a:	2110      	movs	r1, #16
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <clear7SEG+0x50>)
 800144e:	f000 fecc 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2120      	movs	r1, #32
 8001456:	4805      	ldr	r0, [pc, #20]	; (800146c <clear7SEG+0x50>)
 8001458:	f000 fec7 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2140      	movs	r1, #64	; 0x40
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <clear7SEG+0x50>)
 8001462:	f000 fec2 	bl	80021ea <HAL_GPIO_WritePin>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010c00 	.word	0x40010c00

08001470 <update7SEG>:
/**
 * @brief	Update the 7-segment LEDs based on an array of 4 integer numbers
 * @param	index : The index of LED displayed
 * @retval	None
 */
void update7SEG(int index) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	switch(index) {
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b03      	cmp	r3, #3
 800147c:	f200 8084 	bhi.w	8001588 <update7SEG+0x118>
 8001480:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <update7SEG+0x18>)
 8001482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001486:	bf00      	nop
 8001488:	08001499 	.word	0x08001499
 800148c:	080014d5 	.word	0x080014d5
 8001490:	08001511 	.word	0x08001511
 8001494:	0800154d 	.word	0x0800154d
	case 0:
		// Display the first 7SEG with led_buffer[0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	483d      	ldr	r0, [pc, #244]	; (8001594 <update7SEG+0x124>)
 80014a0:	f000 fea3 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014aa:	483a      	ldr	r0, [pc, #232]	; (8001594 <update7SEG+0x124>)
 80014ac:	f000 fe9d 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b6:	4837      	ldr	r0, [pc, #220]	; (8001594 <update7SEG+0x124>)
 80014b8:	f000 fe97 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c2:	4834      	ldr	r0, [pc, #208]	; (8001594 <update7SEG+0x124>)
 80014c4:	f000 fe91 	bl	80021ea <HAL_GPIO_WritePin>

		display7SEG(led_buffer[0]);
 80014c8:	4b33      	ldr	r3, [pc, #204]	; (8001598 <update7SEG+0x128>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fdf3 	bl	80010b8 <display7SEG>
		break;
 80014d2:	e05a      	b.n	800158a <update7SEG+0x11a>

	case 1:
		// Display the second 7SEG with led_buffer[1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014da:	482e      	ldr	r0, [pc, #184]	; (8001594 <update7SEG+0x124>)
 80014dc:	f000 fe85 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	482b      	ldr	r0, [pc, #172]	; (8001594 <update7SEG+0x124>)
 80014e8:	f000 fe7f 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f2:	4828      	ldr	r0, [pc, #160]	; (8001594 <update7SEG+0x124>)
 80014f4:	f000 fe79 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fe:	4825      	ldr	r0, [pc, #148]	; (8001594 <update7SEG+0x124>)
 8001500:	f000 fe73 	bl	80021ea <HAL_GPIO_WritePin>

		display7SEG(led_buffer[1]);
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <update7SEG+0x128>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fdd5 	bl	80010b8 <display7SEG>
		break;
 800150e:	e03c      	b.n	800158a <update7SEG+0x11a>

	case 2:
		// Display the third 7SEG with led_buffer[2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <update7SEG+0x124>)
 8001518:	f000 fe67 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001522:	481c      	ldr	r0, [pc, #112]	; (8001594 <update7SEG+0x124>)
 8001524:	f000 fe61 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001528:	2200      	movs	r2, #0
 800152a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800152e:	4819      	ldr	r0, [pc, #100]	; (8001594 <update7SEG+0x124>)
 8001530:	f000 fe5b 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800153a:	4816      	ldr	r0, [pc, #88]	; (8001594 <update7SEG+0x124>)
 800153c:	f000 fe55 	bl	80021ea <HAL_GPIO_WritePin>

		display7SEG(led_buffer[2]);
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <update7SEG+0x128>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fdb7 	bl	80010b8 <display7SEG>
		break;
 800154a:	e01e      	b.n	800158a <update7SEG+0x11a>

	case 3:
		// Display the forth 7SEG with led_buffer[3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001552:	4810      	ldr	r0, [pc, #64]	; (8001594 <update7SEG+0x124>)
 8001554:	f000 fe49 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <update7SEG+0x124>)
 8001560:	f000 fe43 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	480a      	ldr	r0, [pc, #40]	; (8001594 <update7SEG+0x124>)
 800156c:	f000 fe3d 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <update7SEG+0x124>)
 8001578:	f000 fe37 	bl	80021ea <HAL_GPIO_WritePin>

		display7SEG(led_buffer[3]);
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <update7SEG+0x128>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd99 	bl	80010b8 <display7SEG>
		break;
 8001586:	e000      	b.n	800158a <update7SEG+0x11a>

	default:
		break;
 8001588:	bf00      	nop
	}
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40010800 	.word	0x40010800
 8001598:	200000b8 	.word	0x200000b8

0800159c <updateLedBuffer>:
 * @brief	Update the led buffer at the index position with the input value
 * @param	index : The index of led buffer
 *			value : The updated value
 * @retval	None
 */
void updateLedBuffer(int index, int value) {
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	if (value <= 0) {
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dc05      	bgt.n	80015b8 <updateLedBuffer+0x1c>
		led_buffer[index] = 0;
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <updateLedBuffer+0x30>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2100      	movs	r1, #0
 80015b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	} else {
		led_buffer[index] = value;
	}
}
 80015b6:	e004      	b.n	80015c2 <updateLedBuffer+0x26>
		led_buffer[index] = value;
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <updateLedBuffer+0x30>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	200000b8 	.word	0x200000b8

080015d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f000 fb06 	bl	8001be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f000 f80d 	bl	80015f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f000 f892 	bl	8001704 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015e0:	f000 f844 	bl	800166c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  init_system();
 80015e4:	f000 f8f0 	bl	80017c8 <init_system>
//		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  }
//	  if (isButtonLongPressed(0) == 1) {
//		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//	  }
	  FSM_Automatic_Run();
 80015e8:	f7fe fe82 	bl	80002f0 <FSM_Automatic_Run>
	  FSM_Manual_Run();
 80015ec:	f7ff fc12 	bl	8000e14 <FSM_Manual_Run>
	  FSM_Config_Run();
 80015f0:	f7ff f990 	bl	8000914 <FSM_Config_Run>
	  FSM_Automatic_Run();
 80015f4:	e7f8      	b.n	80015e8 <main+0x18>

080015f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b090      	sub	sp, #64	; 0x40
 80015fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	2228      	movs	r2, #40	; 0x28
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fddb 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001618:	2302      	movs	r3, #2
 800161a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001620:	2310      	movs	r3, #16
 8001622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	4618      	mov	r0, r3
 800162e:	f000 fe0d 	bl	800224c <HAL_RCC_OscConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001638:	f000 f8fa 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163c:	230f      	movs	r3, #15
 800163e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f001 f87b 	bl	8002750 <HAL_RCC_ClockConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001660:	f000 f8e6 	bl	8001830 <Error_Handler>
  }
}
 8001664:	bf00      	nop
 8001666:	3740      	adds	r7, #64	; 0x40
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0x94>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0x94>)
 8001692:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001696:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_TIM2_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800169e:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a0:	2209      	movs	r2, #9
 80016a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM2_Init+0x94>)
 80016b2:	f001 f9a9 	bl	8002a08 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016bc:	f000 f8b8 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ce:	f001 fb27 	bl	8002d20 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d8:	f000 f8aa 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ea:	f001 fcff 	bl	80030ec <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 f89c 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200000c8 	.word	0x200000c8

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <MX_GPIO_Init+0xb8>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a27      	ldr	r2, [pc, #156]	; (80017bc <MX_GPIO_Init+0xb8>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b25      	ldr	r3, [pc, #148]	; (80017bc <MX_GPIO_Init+0xb8>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <MX_GPIO_Init+0xb8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a21      	ldr	r2, [pc, #132]	; (80017bc <MX_GPIO_Init+0xb8>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_GPIO_Init+0xb8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED_1_Pin|YEL_LED_1_Pin|GRN_LED_1_Pin|RED_LED_2_Pin
 8001748:	2200      	movs	r2, #0
 800174a:	f640 71bf 	movw	r1, #4031	; 0xfbf
 800174e:	481c      	ldr	r0, [pc, #112]	; (80017c0 <MX_GPIO_Init+0xbc>)
 8001750:	f000 fd4b 	bl	80021ea <HAL_GPIO_WritePin>
                          |YEL_LED_2_Pin|GRN_LED_2_Pin|LED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_a_Pin|LED7_b_Pin|LED7_c_Pin|LED7_d_Pin
 8001754:	2200      	movs	r2, #0
 8001756:	217f      	movs	r1, #127	; 0x7f
 8001758:	481a      	ldr	r0, [pc, #104]	; (80017c4 <MX_GPIO_Init+0xc0>)
 800175a:	f000 fd46 	bl	80021ea <HAL_GPIO_WritePin>
                          |LED7_e_Pin|LED7_f_Pin|LED7_g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_LED_1_Pin YEL_LED_1_Pin GRN_LED_1_Pin RED_LED_2_Pin
                           YEL_LED_2_Pin GRN_LED_2_Pin LED_Pin EN0_Pin
                           EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED_LED_1_Pin|YEL_LED_1_Pin|GRN_LED_1_Pin|RED_LED_2_Pin
 800175e:	f640 73bf 	movw	r3, #4031	; 0xfbf
 8001762:	60bb      	str	r3, [r7, #8]
                          |YEL_LED_2_Pin|GRN_LED_2_Pin|LED_Pin|EN0_Pin
                          |EN1_Pin|EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2302      	movs	r3, #2
 800176e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	4619      	mov	r1, r3
 8001776:	4812      	ldr	r0, [pc, #72]	; (80017c0 <MX_GPIO_Init+0xbc>)
 8001778:	f000 fba4 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_a_Pin LED7_b_Pin LED7_c_Pin LED7_d_Pin
                           LED7_e_Pin LED7_f_Pin LED7_g_Pin */
  GPIO_InitStruct.Pin = LED7_a_Pin|LED7_b_Pin|LED7_c_Pin|LED7_d_Pin
 800177c:	237f      	movs	r3, #127	; 0x7f
 800177e:	60bb      	str	r3, [r7, #8]
                          |LED7_e_Pin|LED7_f_Pin|LED7_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2302      	movs	r3, #2
 800178a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4619      	mov	r1, r3
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <MX_GPIO_Init+0xc0>)
 8001794:	f000 fb96 	bl	8001ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001798:	f44f 7360 	mov.w	r3, #896	; 0x380
 800179c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a2:	2301      	movs	r3, #1
 80017a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_GPIO_Init+0xc0>)
 80017ae:	f000 fb89 	bl	8001ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010800 	.word	0x40010800
 80017c4:	40010c00 	.word	0x40010c00

080017c8 <init_system>:

/* USER CODE BEGIN 4 */
void init_system(void) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80017cc:	480f      	ldr	r0, [pc, #60]	; (800180c <init_system+0x44>)
 80017ce:	f001 f96b 	bl	8002aa8 <HAL_TIM_Base_Start_IT>
	clear7SEG();
 80017d2:	f7ff fe23 	bl	800141c <clear7SEG>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017dc:	480c      	ldr	r0, [pc, #48]	; (8001810 <init_system+0x48>)
 80017de:	f000 fd04 	bl	80021ea <HAL_GPIO_WritePin>
	status = INIT_AUTO;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <init_system+0x4c>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
	setTimer(3, 500);
 80017e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f825 	bl	800183c <setTimer>
	setTimer(4, 1000);
 80017f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017f6:	2004      	movs	r0, #4
 80017f8:	f000 f820 	bl	800183c <setTimer>
	setTimer(5, 1000);
 80017fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001800:	2005      	movs	r0, #5
 8001802:	f000 f81b 	bl	800183c <setTimer>
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200000c8 	.word	0x200000c8
 8001810:	40010800 	.word	0x40010800
 8001814:	200000b0 	.word	0x200000b0

08001818 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001820:	f000 f840 	bl	80018a4 <timerRun>
	getKeyInput();
 8001824:	f7fe fcc6 	bl	80001b4 <getKeyInput>
}
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	e7fe      	b.n	8001838 <Error_Handler+0x8>
	...

0800183c <setTimer>:
 * @brief	Set duration of software timer interrupt at the index position
 * @param	index : The index of current timer
 * 			duration : Duration of software timer interrupt
 * @retval 	None
 */
void setTimer(int index, int duration) {
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_CYCLE;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4a09      	ldr	r2, [pc, #36]	; (8001870 <setTimer+0x34>)
 800184a:	fb82 1203 	smull	r1, r2, r2, r3
 800184e:	1092      	asrs	r2, r2, #2
 8001850:	17db      	asrs	r3, r3, #31
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <setTimer+0x38>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <setTimer+0x3c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2100      	movs	r1, #0
 8001862:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	66666667 	.word	0x66666667
 8001874:	20000138 	.word	0x20000138
 8001878:	20000110 	.word	0x20000110

0800187c <isTimerExpired>:
/**
 * @brief	Check if the index timer is expired or not
 * @param	index : The index of current timer
 * @retval	1 if the timer is expired (flag = 1) or 0 if it is not (flag = 0)
 */
int isTimerExpired(int index) {
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1) {
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <isTimerExpired+0x24>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <isTimerExpired+0x18>
		return 1;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <isTimerExpired+0x1a>
	}
	return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000110 	.word	0x20000110

080018a4 <timerRun>:
/**
 * @brief	Run the timer
 * @param	None
 * @retval	None
 */
void timerRun(void) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_TIMER; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	e01c      	b.n	80018ea <timerRun+0x46>
		if (timer_counter[i] > 0) {
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <timerRun+0x58>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dd13      	ble.n	80018e4 <timerRun+0x40>
			timer_counter[i]--;
 80018bc:	4a0f      	ldr	r2, [pc, #60]	; (80018fc <timerRun+0x58>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <timerRun+0x58>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0) {
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <timerRun+0x58>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	dc04      	bgt.n	80018e4 <timerRun+0x40>
				timer_flag[i] = 1;
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <timerRun+0x5c>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2101      	movs	r1, #1
 80018e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_TIMER; i++) {
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	dddf      	ble.n	80018b0 <timerRun+0xc>
			}
		}
	}
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000138 	.word	0x20000138
 8001900:	20000110 	.word	0x20000110

08001904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_MspInit+0x5c>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4a14      	ldr	r2, [pc, #80]	; (8001960 <HAL_MspInit+0x5c>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6193      	str	r3, [r2, #24]
 8001916:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_MspInit+0x5c>)
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x5c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x5c>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x5c>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_MspInit+0x60>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_MspInit+0x60>)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	40021000 	.word	0x40021000
 8001964:	40010000 	.word	0x40010000

08001968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d113      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_TIM_Base_MspInit+0x44>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a0b      	ldr	r2, [pc, #44]	; (80019ac <HAL_TIM_Base_MspInit+0x44>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_TIM_Base_MspInit+0x44>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	201c      	movs	r0, #28
 8001998:	f000 fa5d 	bl	8001e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800199c:	201c      	movs	r0, #28
 800199e:	f000 fa76 	bl	8001e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr

080019f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f6:	f000 f93b 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM2_IRQHandler+0x10>)
 8001a06:	f001 f89b 	bl	8002b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200000c8 	.word	0x200000c8

08001a14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <setLightWay1>:
/**
 * @brief	Control the traffic light on way 1 (vertical)
 * @param	red, yellow, green : The status of 3 LEDs: red, yellow and green
 * @retval	None
 */
void setLightWay1(int red, int yellow, int green) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin, red);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	461a      	mov	r2, r3
 8001a32:	2101      	movs	r1, #1
 8001a34:	480a      	ldr	r0, [pc, #40]	; (8001a60 <setLightWay1+0x40>)
 8001a36:	f000 fbd8 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin, yellow);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2102      	movs	r1, #2
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <setLightWay1+0x40>)
 8001a44:	f000 fbd1 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin, green);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <setLightWay1+0x40>)
 8001a52:	f000 fbca 	bl	80021ea <HAL_GPIO_WritePin>
}
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010800 	.word	0x40010800

08001a64 <setLightWay2>:
/**
 * @brief	Control the traffic light on way 2 (horizontal)
 * @param	red, yellow, green : The status of 3 LEDs: red, yellow and green
 * @retval	None
 */
void setLightWay2(int red, int yellow, int green) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin, red);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	2108      	movs	r1, #8
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <setLightWay2+0x40>)
 8001a7a:	f000 fbb6 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin, yellow);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	2110      	movs	r1, #16
 8001a86:	4807      	ldr	r0, [pc, #28]	; (8001aa4 <setLightWay2+0x40>)
 8001a88:	f000 fbaf 	bl	80021ea <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin, green);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	2120      	movs	r1, #32
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <setLightWay2+0x40>)
 8001a96:	f000 fba8 	bl	80021ea <HAL_GPIO_WritePin>
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40010800 	.word	0x40010800

08001aa8 <setAllRedLED>:
/**
 * @brief	Turn ON and OFF all red LEDs
 * @param	LEDstatus : The state of red LEDs (ON / OFF)
 * @retval	None
 */
void setAllRedLED(int LEDstatus) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	switch (LEDstatus) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <setAllRedLED+0x2a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d115      	bne.n	8001ae8 <setAllRedLED+0x40>
	case ON:
		HAL_GPIO_WritePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin, RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2101      	movs	r1, #1
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <setAllRedLED+0x4c>)
 8001ac2:	f000 fb92 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin, RESET);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2108      	movs	r1, #8
 8001aca:	480a      	ldr	r0, [pc, #40]	; (8001af4 <setAllRedLED+0x4c>)
 8001acc:	f000 fb8d 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001ad0:	e00b      	b.n	8001aea <setAllRedLED+0x42>

	case OFF:
		HAL_GPIO_WritePin(RED_LED_1_GPIO_Port, RED_LED_1_Pin, SET);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <setAllRedLED+0x4c>)
 8001ad8:	f000 fb87 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_2_GPIO_Port, RED_LED_2_Pin, SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2108      	movs	r1, #8
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <setAllRedLED+0x4c>)
 8001ae2:	f000 fb82 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001ae6:	e000      	b.n	8001aea <setAllRedLED+0x42>

	default:
		break;
 8001ae8:	bf00      	nop
	}
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40010800 	.word	0x40010800

08001af8 <setAllYellowLED>:
/**
 * @brief	Turn ON and OFF all yellow LEDs
 * @param	LEDstatus : The state of yellow LEDs (ON / OFF)
 * @retval	None
 */
void setAllYellowLED(int LEDstatus) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	switch (LEDstatus) {
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00d      	beq.n	8001b22 <setAllYellowLED+0x2a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d115      	bne.n	8001b38 <setAllYellowLED+0x40>
	case ON:
		HAL_GPIO_WritePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin, RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2102      	movs	r1, #2
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <setAllYellowLED+0x4c>)
 8001b12:	f000 fb6a 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin, RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2110      	movs	r1, #16
 8001b1a:	480a      	ldr	r0, [pc, #40]	; (8001b44 <setAllYellowLED+0x4c>)
 8001b1c:	f000 fb65 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001b20:	e00b      	b.n	8001b3a <setAllYellowLED+0x42>

	case OFF:
		HAL_GPIO_WritePin(YEL_LED_1_GPIO_Port, YEL_LED_1_Pin, SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2102      	movs	r1, #2
 8001b26:	4807      	ldr	r0, [pc, #28]	; (8001b44 <setAllYellowLED+0x4c>)
 8001b28:	f000 fb5f 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YEL_LED_2_GPIO_Port, YEL_LED_2_Pin, SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2110      	movs	r1, #16
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <setAllYellowLED+0x4c>)
 8001b32:	f000 fb5a 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001b36:	e000      	b.n	8001b3a <setAllYellowLED+0x42>

	default:
		break;
 8001b38:	bf00      	nop
	}
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40010800 	.word	0x40010800

08001b48 <setAllGreenLED>:
/**
 * @brief	Turn ON and OFF all green LEDs
 * @param	LEDstatus : The state of green LEDs (ON / OFF)
 * @retval	None
 */
void setAllGreenLED(int LEDstatus) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	switch (LEDstatus) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00d      	beq.n	8001b72 <setAllGreenLED+0x2a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d115      	bne.n	8001b88 <setAllGreenLED+0x40>
	case ON:
		HAL_GPIO_WritePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin, RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2104      	movs	r1, #4
 8001b60:	480c      	ldr	r0, [pc, #48]	; (8001b94 <setAllGreenLED+0x4c>)
 8001b62:	f000 fb42 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin, RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2120      	movs	r1, #32
 8001b6a:	480a      	ldr	r0, [pc, #40]	; (8001b94 <setAllGreenLED+0x4c>)
 8001b6c:	f000 fb3d 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001b70:	e00b      	b.n	8001b8a <setAllGreenLED+0x42>

	case OFF:
		HAL_GPIO_WritePin(GRN_LED_1_GPIO_Port, GRN_LED_1_Pin, SET);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2104      	movs	r1, #4
 8001b76:	4807      	ldr	r0, [pc, #28]	; (8001b94 <setAllGreenLED+0x4c>)
 8001b78:	f000 fb37 	bl	80021ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GRN_LED_2_GPIO_Port, GRN_LED_2_Pin, SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2120      	movs	r1, #32
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <setAllGreenLED+0x4c>)
 8001b82:	f000 fb32 	bl	80021ea <HAL_GPIO_WritePin>
		break;
 8001b86:	e000      	b.n	8001b8a <setAllGreenLED+0x42>

	default:
		break;
 8001b88:	bf00      	nop
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40010800 	.word	0x40010800

08001b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b98:	f7ff ff3c 	bl	8001a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b9c:	480b      	ldr	r0, [pc, #44]	; (8001bcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b9e:	490c      	ldr	r1, [pc, #48]	; (8001bd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb4:	4c09      	ldr	r4, [pc, #36]	; (8001bdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f001 fb05 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc6:	f7ff fd03 	bl	80015d0 <main>
  bx lr
 8001bca:	4770      	bx	lr
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001bd4:	0800325c 	.word	0x0800325c
  ldr r2, =_sbss
 8001bd8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001bdc:	20000164 	.word	0x20000164

08001be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be0:	e7fe      	b.n	8001be0 <ADC1_2_IRQHandler>
	...

08001be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x28>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x28>)
 8001bee:	f043 0310 	orr.w	r3, r3, #16
 8001bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f923 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fe80 	bl	8001904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f93b 	bl	8001eaa <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f903 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000028 	.word	0x20000028
 8001c68:	20000030 	.word	0x20000030
 8001c6c:	2000002c 	.word	0x2000002c

08001c70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_IncTick+0x1c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_IncTick+0x20>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_IncTick+0x20>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	20000030 	.word	0x20000030
 8001c90:	20000160 	.word	0x20000160

08001c94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b02      	ldr	r3, [pc, #8]	; (8001ca4 <HAL_GetTick+0x10>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	20000160 	.word	0x20000160

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4906      	ldr	r1, [pc, #24]	; (8001d40 <__NVIC_EnableIRQ+0x34>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff90 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff2d 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff42 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff90 	bl	8001d98 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5f 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff35 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff ffa2 	bl	8001dfc <SysTick_Config>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b08b      	sub	sp, #44	; 0x2c
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed6:	e161      	b.n	800219c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f040 8150 	bne.w	8002196 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4a97      	ldr	r2, [pc, #604]	; (8002158 <HAL_GPIO_Init+0x294>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d05e      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f00:	4a95      	ldr	r2, [pc, #596]	; (8002158 <HAL_GPIO_Init+0x294>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d875      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f06:	4a95      	ldr	r2, [pc, #596]	; (800215c <HAL_GPIO_Init+0x298>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d058      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f0c:	4a93      	ldr	r2, [pc, #588]	; (800215c <HAL_GPIO_Init+0x298>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d86f      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f12:	4a93      	ldr	r2, [pc, #588]	; (8002160 <HAL_GPIO_Init+0x29c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d052      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f18:	4a91      	ldr	r2, [pc, #580]	; (8002160 <HAL_GPIO_Init+0x29c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d869      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f1e:	4a91      	ldr	r2, [pc, #580]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d04c      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f24:	4a8f      	ldr	r2, [pc, #572]	; (8002164 <HAL_GPIO_Init+0x2a0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d863      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f2a:	4a8f      	ldr	r2, [pc, #572]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d046      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
 8001f30:	4a8d      	ldr	r2, [pc, #564]	; (8002168 <HAL_GPIO_Init+0x2a4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d85d      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f36:	2b12      	cmp	r3, #18
 8001f38:	d82a      	bhi.n	8001f90 <HAL_GPIO_Init+0xcc>
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d859      	bhi.n	8001ff2 <HAL_GPIO_Init+0x12e>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_GPIO_Init+0x80>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001fbf 	.word	0x08001fbf
 8001f48:	08001f99 	.word	0x08001f99
 8001f4c:	08001fab 	.word	0x08001fab
 8001f50:	08001fed 	.word	0x08001fed
 8001f54:	08001ff3 	.word	0x08001ff3
 8001f58:	08001ff3 	.word	0x08001ff3
 8001f5c:	08001ff3 	.word	0x08001ff3
 8001f60:	08001ff3 	.word	0x08001ff3
 8001f64:	08001ff3 	.word	0x08001ff3
 8001f68:	08001ff3 	.word	0x08001ff3
 8001f6c:	08001ff3 	.word	0x08001ff3
 8001f70:	08001ff3 	.word	0x08001ff3
 8001f74:	08001ff3 	.word	0x08001ff3
 8001f78:	08001ff3 	.word	0x08001ff3
 8001f7c:	08001ff3 	.word	0x08001ff3
 8001f80:	08001ff3 	.word	0x08001ff3
 8001f84:	08001ff3 	.word	0x08001ff3
 8001f88:	08001fa1 	.word	0x08001fa1
 8001f8c:	08001fb5 	.word	0x08001fb5
 8001f90:	4a76      	ldr	r2, [pc, #472]	; (800216c <HAL_GPIO_Init+0x2a8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f96:	e02c      	b.n	8001ff2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	623b      	str	r3, [r7, #32]
          break;
 8001f9e:	e029      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	623b      	str	r3, [r7, #32]
          break;
 8001fa8:	e024      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	3308      	adds	r3, #8
 8001fb0:	623b      	str	r3, [r7, #32]
          break;
 8001fb2:	e01f      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	623b      	str	r3, [r7, #32]
          break;
 8001fbc:	e01a      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d102      	bne.n	8001fcc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	623b      	str	r3, [r7, #32]
          break;
 8001fca:	e013      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fd4:	2308      	movs	r3, #8
 8001fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	611a      	str	r2, [r3, #16]
          break;
 8001fde:	e009      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	615a      	str	r2, [r3, #20]
          break;
 8001fea:	e003      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
          break;
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x130>
          break;
 8001ff2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2bff      	cmp	r3, #255	; 0xff
 8001ff8:	d801      	bhi.n	8001ffe <HAL_GPIO_Init+0x13a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	e001      	b.n	8002002 <HAL_GPIO_Init+0x13e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2bff      	cmp	r3, #255	; 0xff
 8002008:	d802      	bhi.n	8002010 <HAL_GPIO_Init+0x14c>
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	e002      	b.n	8002016 <HAL_GPIO_Init+0x152>
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	3b08      	subs	r3, #8
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	210f      	movs	r1, #15
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	6a39      	ldr	r1, [r7, #32]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	fa01 f303 	lsl.w	r3, r1, r3
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80a9 	beq.w	8002196 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6193      	str	r3, [r2, #24]
 8002050:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_GPIO_Init+0x2ac>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800205c:	4a45      	ldr	r2, [pc, #276]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <HAL_GPIO_Init+0x2b4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d00d      	beq.n	80020a4 <HAL_GPIO_Init+0x1e0>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a3c      	ldr	r2, [pc, #240]	; (800217c <HAL_GPIO_Init+0x2b8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <HAL_GPIO_Init+0x1dc>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_GPIO_Init+0x2bc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d101      	bne.n	800209c <HAL_GPIO_Init+0x1d8>
 8002098:	2302      	movs	r3, #2
 800209a:	e004      	b.n	80020a6 <HAL_GPIO_Init+0x1e2>
 800209c:	2303      	movs	r3, #3
 800209e:	e002      	b.n	80020a6 <HAL_GPIO_Init+0x1e2>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <HAL_GPIO_Init+0x1e2>
 80020a4:	2300      	movs	r3, #0
 80020a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a8:	f002 0203 	and.w	r2, r2, #3
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	4093      	lsls	r3, r2
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020b6:	492f      	ldr	r1, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x2b0>)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	492b      	ldr	r1, [pc, #172]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020de:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	4921      	ldr	r1, [pc, #132]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
 8002104:	e006      	b.n	8002114 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002108:	68da      	ldr	r2, [r3, #12]
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	43db      	mvns	r3, r3
 800210e:	491d      	ldr	r1, [pc, #116]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002110:	4013      	ands	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4917      	ldr	r1, [pc, #92]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
 800212c:	e006      	b.n	800213c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	43db      	mvns	r3, r3
 8002136:	4913      	ldr	r1, [pc, #76]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 8002138:	4013      	ands	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01f      	beq.n	8002188 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	490d      	ldr	r1, [pc, #52]	; (8002184 <HAL_GPIO_Init+0x2c0>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e01f      	b.n	8002196 <HAL_GPIO_Init+0x2d2>
 8002156:	bf00      	nop
 8002158:	10320000 	.word	0x10320000
 800215c:	10310000 	.word	0x10310000
 8002160:	10220000 	.word	0x10220000
 8002164:	10210000 	.word	0x10210000
 8002168:	10120000 	.word	0x10120000
 800216c:	10110000 	.word	0x10110000
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000
 8002178:	40010800 	.word	0x40010800
 800217c:	40010c00 	.word	0x40010c00
 8002180:	40011000 	.word	0x40011000
 8002184:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_GPIO_Init+0x2f4>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4909      	ldr	r1, [pc, #36]	; (80021b8 <HAL_GPIO_Init+0x2f4>)
 8002192:	4013      	ands	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae96 	bne.w	8001ed8 <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	372c      	adds	r7, #44	; 0x2c
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	887b      	ldrh	r3, [r7, #2]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e001      	b.n	80021de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fa:	787b      	ldrb	r3, [r7, #1]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002206:	e003      	b.n	8002210 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	041a      	lsls	r2, r3, #16
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	611a      	str	r2, [r3, #16]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr

0800221a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800222c:	887a      	ldrh	r2, [r7, #2]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	041a      	lsls	r2, r3, #16
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43d9      	mvns	r1, r3
 8002238:	887b      	ldrh	r3, [r7, #2]
 800223a:	400b      	ands	r3, r1
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e272      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800226c:	4b92      	ldr	r3, [pc, #584]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b04      	cmp	r3, #4
 8002276:	d00c      	beq.n	8002292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002278:	4b8f      	ldr	r3, [pc, #572]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 030c 	and.w	r3, r3, #12
 8002280:	2b08      	cmp	r3, #8
 8002282:	d112      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
 8002284:	4b8c      	ldr	r3, [pc, #560]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002290:	d10b      	bne.n	80022aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d06c      	beq.n	8002378 <HAL_RCC_OscConfig+0x12c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d168      	bne.n	8002378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e24c      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x76>
 80022b4:	4b80      	ldr	r3, [pc, #512]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a7f      	ldr	r2, [pc, #508]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	e02e      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x98>
 80022ca:	4b7b      	ldr	r3, [pc, #492]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d4:	6013      	str	r3, [r2, #0]
 80022d6:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a77      	ldr	r2, [pc, #476]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	e01d      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ec:	d10c      	bne.n	8002308 <HAL_RCC_OscConfig+0xbc>
 80022ee:	4b72      	ldr	r3, [pc, #456]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a71      	ldr	r2, [pc, #452]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	4b6f      	ldr	r3, [pc, #444]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6e      	ldr	r2, [pc, #440]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_OscConfig+0xd4>
 8002308:	4b6b      	ldr	r3, [pc, #428]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a6a      	ldr	r2, [pc, #424]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800230e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a67      	ldr	r2, [pc, #412]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800231a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800231e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d013      	beq.n	8002350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7ff fcb4 	bl	8001c94 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002330:	f7ff fcb0 	bl	8001c94 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e200      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0xe4>
 800234e:	e014      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fca0 	bl	8001c94 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fc9c 	bl	8001c94 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e1ec      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236a:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x10c>
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d063      	beq.n	800244e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00b      	beq.n	80023aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002392:	4b49      	ldr	r3, [pc, #292]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b08      	cmp	r3, #8
 800239c:	d11c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d116      	bne.n	80023d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d001      	beq.n	80023c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1c0      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4939      	ldr	r1, [pc, #228]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	e03a      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fc55 	bl	8001c94 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fc51 	bl	8001c94 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e1a1      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]
 8002420:	e015      	b.n	800244e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x270>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fc34 	bl	8001c94 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7ff fc30 	bl	8001c94 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e180      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002442:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d03a      	beq.n	80024d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002468:	f7ff fc14 	bl	8001c94 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002470:	f7ff fc10 	bl	8001c94 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e160      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800248e:	2001      	movs	r0, #1
 8002490:	f000 fa9c 	bl	80029cc <RCC_Delay>
 8002494:	e01c      	b.n	80024d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_OscConfig+0x274>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7ff fbfa 	bl	8001c94 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff fbf6 	bl	8001c94 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d908      	bls.n	80024c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e146      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	42420000 	.word	0x42420000
 80024c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	4b92      	ldr	r3, [pc, #584]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e9      	bne.n	80024a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 80a6 	beq.w	800262a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024de:	2300      	movs	r3, #0
 80024e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e2:	4b8b      	ldr	r3, [pc, #556]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10d      	bne.n	800250a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b88      	ldr	r3, [pc, #544]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	4a87      	ldr	r2, [pc, #540]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61d3      	str	r3, [r2, #28]
 80024fa:	4b85      	ldr	r3, [pc, #532]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002506:	2301      	movs	r3, #1
 8002508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b82      	ldr	r3, [pc, #520]	; (8002714 <HAL_RCC_OscConfig+0x4c8>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d118      	bne.n	8002548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b7f      	ldr	r3, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x4c8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7e      	ldr	r2, [pc, #504]	; (8002714 <HAL_RCC_OscConfig+0x4c8>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002522:	f7ff fbb7 	bl	8001c94 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252a:	f7ff fbb3 	bl	8001c94 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b64      	cmp	r3, #100	; 0x64
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e103      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x4c8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x312>
 8002550:	4b6f      	ldr	r3, [pc, #444]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a6e      	ldr	r2, [pc, #440]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6213      	str	r3, [r2, #32]
 800255c:	e02d      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x334>
 8002566:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	4a69      	ldr	r2, [pc, #420]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6213      	str	r3, [r2, #32]
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a66      	ldr	r2, [pc, #408]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6213      	str	r3, [r2, #32]
 800257e:	e01c      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b05      	cmp	r3, #5
 8002586:	d10c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x356>
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	4a60      	ldr	r2, [pc, #384]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800258e:	f043 0304 	orr.w	r3, r3, #4
 8002592:	6213      	str	r3, [r2, #32]
 8002594:	4b5e      	ldr	r3, [pc, #376]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4a5d      	ldr	r2, [pc, #372]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
 80025a0:	e00b      	b.n	80025ba <HAL_RCC_OscConfig+0x36e>
 80025a2:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a5a      	ldr	r2, [pc, #360]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4b58      	ldr	r3, [pc, #352]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4a57      	ldr	r2, [pc, #348]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	f023 0304 	bic.w	r3, r3, #4
 80025b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c2:	f7ff fb67 	bl	8001c94 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7ff fb63 	bl	8001c94 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0b1      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	4b4b      	ldr	r3, [pc, #300]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0ee      	beq.n	80025ca <HAL_RCC_OscConfig+0x37e>
 80025ec:	e014      	b.n	8002618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fb51 	bl	8001c94 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7ff fb4d 	bl	8001c94 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e09b      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	4b40      	ldr	r3, [pc, #256]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a3b      	ldr	r2, [pc, #236]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8087 	beq.w	8002742 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d061      	beq.n	8002704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d146      	bne.n	80026d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002648:	4b33      	ldr	r3, [pc, #204]	; (8002718 <HAL_RCC_OscConfig+0x4cc>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7ff fb21 	bl	8001c94 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7ff fb1d 	bl	8001c94 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e06d      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002668:	4b29      	ldr	r3, [pc, #164]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	4921      	ldr	r1, [pc, #132]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a19      	ldr	r1, [r3, #32]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	430b      	orrs	r3, r1
 80026a2:	491b      	ldr	r1, [pc, #108]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCC_OscConfig+0x4cc>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7ff faf1 	bl	8001c94 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b6:	f7ff faed 	bl	8001c94 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e03d      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0f0      	beq.n	80026b6 <HAL_RCC_OscConfig+0x46a>
 80026d4:	e035      	b.n	8002742 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCC_OscConfig+0x4cc>)
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7ff fada 	bl	8001c94 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e4:	f7ff fad6 	bl	8001c94 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e026      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x498>
 8002702:	e01e      	b.n	8002742 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e019      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800271c:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x500>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	429a      	cmp	r2, r3
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0d0      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4965      	ldr	r1, [pc, #404]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b63      	ldr	r3, [pc, #396]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0b8      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ac:	4b59      	ldr	r3, [pc, #356]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	494d      	ldr	r1, [pc, #308]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d040      	beq.n	8002870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d115      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e07f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e073      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06b      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4936      	ldr	r1, [pc, #216]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002840:	f7ff fa28 	bl	8001c94 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7ff fa24 	bl	8001c94 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e053      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d210      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4922      	ldr	r1, [pc, #136]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e032      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4916      	ldr	r1, [pc, #88]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	490e      	ldr	r1, [pc, #56]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028de:	f000 f821 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1cc>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1d0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f986 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40022000 	.word	0x40022000
 8002914:	40021000 	.word	0x40021000
 8002918:	08003230 	.word	0x08003230
 800291c:	20000028 	.word	0x20000028
 8002920:	2000002c 	.word	0x2000002c

08002924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d002      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x30>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d003      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x36>
 8002952:	e027      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002956:	613b      	str	r3, [r7, #16]
      break;
 8002958:	e027      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0c9b      	lsrs	r3, r3, #18
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	4a17      	ldr	r2, [pc, #92]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d010      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0c5b      	lsrs	r3, r3, #17
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002986:	fb03 f202 	mul.w	r2, r3, r2
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e004      	b.n	800299e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0c      	ldr	r2, [pc, #48]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	613b      	str	r3, [r7, #16]
      break;
 80029a2:	e002      	b.n	80029aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetSysClockFreq+0x98>)
 80029a6:	613b      	str	r3, [r7, #16]
      break;
 80029a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029aa:	693b      	ldr	r3, [r7, #16]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40021000 	.word	0x40021000
 80029bc:	007a1200 	.word	0x007a1200
 80029c0:	08003240 	.word	0x08003240
 80029c4:	08003250 	.word	0x08003250
 80029c8:	003d0900 	.word	0x003d0900

080029cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCC_Delay+0x34>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <RCC_Delay+0x38>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0a5b      	lsrs	r3, r3, #9
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e8:	bf00      	nop
  }
  while (Delay --);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	60fa      	str	r2, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1f9      	bne.n	80029e8 <RCC_Delay+0x1c>
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000028 	.word	0x20000028
 8002a04:	10624dd3 	.word	0x10624dd3

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe ff9a 	bl	8001968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fa56 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e035      	b.n	8002b2c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a16      	ldr	r2, [pc, #88]	; (8002b38 <HAL_TIM_Base_Start_IT+0x90>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x4e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aea:	d004      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x4e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <HAL_TIM_Base_Start_IT+0x94>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d111      	bne.n	8002b1a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b06      	cmp	r3, #6
 8002b06:	d010      	beq.n	8002b2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	e007      	b.n	8002b2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0201 	orr.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40012c00 	.word	0x40012c00
 8002b3c:	40000400 	.word	0x40000400

08002b40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d020      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01b      	beq.n	8002ba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0202 	mvn.w	r2, #2
 8002b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f998 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002b90:	e005      	b.n	8002b9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f98b 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f99a 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d020      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0204 	mvn.w	r2, #4
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f972 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f965 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f974 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d01b      	beq.n	8002c3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0208 	mvn.w	r2, #8
 8002c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2204      	movs	r2, #4
 8002c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f94c 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f93f 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f94e 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d020      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01b      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0210 	mvn.w	r2, #16
 8002c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f926 	bl	8002ec0 <HAL_TIM_IC_CaptureCallback>
 8002c74:	e005      	b.n	8002c82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f919 	bl	8002eae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f928 	bl	8002ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00c      	beq.n	8002cac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0201 	mvn.w	r2, #1
 8002ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fdb6 	bl	8001818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa6f 	bl	80031ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00c      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d007      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f8f8 	bl	8002ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d007      	beq.n	8002d18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0220 	mvn.w	r2, #32
 8002d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa42 	bl	800319c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_TIM_ConfigClockSource+0x1c>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e0b4      	b.n	8002ea6 <HAL_TIM_ConfigClockSource+0x186>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d74:	d03e      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0xd4>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	f200 8087 	bhi.w	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	f000 8086 	beq.w	8002e92 <HAL_TIM_ConfigClockSource+0x172>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d87f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b70      	cmp	r3, #112	; 0x70
 8002d8e:	d01a      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0xa6>
 8002d90:	2b70      	cmp	r3, #112	; 0x70
 8002d92:	d87b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b60      	cmp	r3, #96	; 0x60
 8002d96:	d050      	beq.n	8002e3a <HAL_TIM_ConfigClockSource+0x11a>
 8002d98:	2b60      	cmp	r3, #96	; 0x60
 8002d9a:	d877      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b50      	cmp	r3, #80	; 0x50
 8002d9e:	d03c      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xfa>
 8002da0:	2b50      	cmp	r3, #80	; 0x50
 8002da2:	d873      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d058      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0x13a>
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d86f      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b30      	cmp	r3, #48	; 0x30
 8002dae:	d064      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002db0:	2b30      	cmp	r3, #48	; 0x30
 8002db2:	d86b      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d060      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d867      	bhi.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05c      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d05a      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc4:	e062      	b.n	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dd6:	f000 f96a 	bl	80030ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	609a      	str	r2, [r3, #8]
      break;
 8002df2:	e04f      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e04:	f000 f953 	bl	80030ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e16:	609a      	str	r2, [r3, #8]
      break;
 8002e18:	e03c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	461a      	mov	r2, r3
 8002e28:	f000 f8ca 	bl	8002fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2150      	movs	r1, #80	; 0x50
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f921 	bl	800307a <TIM_ITRx_SetConfig>
      break;
 8002e38:	e02c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e46:	461a      	mov	r2, r3
 8002e48:	f000 f8e8 	bl	800301c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2160      	movs	r1, #96	; 0x60
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f911 	bl	800307a <TIM_ITRx_SetConfig>
      break;
 8002e58:	e01c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 f8aa 	bl	8002fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2140      	movs	r1, #64	; 0x40
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f901 	bl	800307a <TIM_ITRx_SetConfig>
      break;
 8002e78:	e00c      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 f8f8 	bl	800307a <TIM_ITRx_SetConfig>
      break;
 8002e8a:	e003      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e90:	e000      	b.n	8002e94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a2b      	ldr	r2, [pc, #172]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0x28>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0x28>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a28      	ldr	r2, [pc, #160]	; (8002fbc <TIM_Base_SetConfig+0xc4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0x52>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0x52>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <TIM_Base_SetConfig+0xc4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d103      	bne.n	8002f90 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f023 0201 	bic.w	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	611a      	str	r2, [r3, #16]
  }
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 0201 	bic.w	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 030a 	bic.w	r3, r3, #10
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f023 0210 	bic.w	r2, r3, #16
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	031b      	lsls	r3, r3, #12
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003058:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	4313      	orrs	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	621a      	str	r2, [r3, #32]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800307a:	b480      	push	{r7}
 800307c:	b085      	sub	sp, #20
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	f043 0307 	orr.w	r3, r3, #7
 800309c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b087      	sub	sp, #28
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	021a      	lsls	r2, r3, #8
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	609a      	str	r2, [r3, #8]
}
 80030e2:	bf00      	nop
 80030e4:	371c      	adds	r7, #28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr

080030ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003100:	2302      	movs	r3, #2
 8003102:	e041      	b.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d004      	beq.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d10c      	bne.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003162:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	4313      	orrs	r3, r2
 800316c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40012c00 	.word	0x40012c00
 8003198:	40000400 	.word	0x40000400

0800319c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr

080031ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr

080031c0 <memset>:
 80031c0:	4603      	mov	r3, r0
 80031c2:	4402      	add	r2, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	2600      	movs	r6, #0
 80031d4:	4d0c      	ldr	r5, [pc, #48]	; (8003208 <__libc_init_array+0x38>)
 80031d6:	4c0d      	ldr	r4, [pc, #52]	; (800320c <__libc_init_array+0x3c>)
 80031d8:	1b64      	subs	r4, r4, r5
 80031da:	10a4      	asrs	r4, r4, #2
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	f000 f81a 	bl	8003218 <_init>
 80031e4:	2600      	movs	r6, #0
 80031e6:	4d0a      	ldr	r5, [pc, #40]	; (8003210 <__libc_init_array+0x40>)
 80031e8:	4c0a      	ldr	r4, [pc, #40]	; (8003214 <__libc_init_array+0x44>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	08003254 	.word	0x08003254
 800320c:	08003254 	.word	0x08003254
 8003210:	08003254 	.word	0x08003254
 8003214:	08003258 	.word	0x08003258

08003218 <_init>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr

08003224 <_fini>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr
